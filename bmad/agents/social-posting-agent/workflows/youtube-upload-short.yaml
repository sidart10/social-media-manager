name: youtube-upload-short
description: Upload YouTube Short (vertical video ≤3 min, auto-detected)

instructions: |
  # YouTube Shorts Upload Workflow

  Upload a vertical video as a YouTube Short. YouTube automatically detects
  Shorts based on aspect ratio (9:16) and duration (≤3 minutes).

  ## Steps

  ### 1. Gather Video Path

  Ask for the video file path:
  - "Provide the path to your Short video"
  - "Requirements: 9:16 aspect ratio (vertical), ≤3 minutes"
  - "Recommended: 1080x1920 resolution"
  - "Format: MP4 recommended"

  **Important**: Must be ABSOLUTE path and VERTICAL!

  **Store as**: `video_path`

  ### 2. Gather Video Title

  Ask for the title:
  - "What's the title for your Short?"
  - "Tip: Include #shorts or #Shorts for better promotion"

  **Example:** "Quick Tutorial: API Automation #shorts"

  **Store as**: `video_title`

  ### 3. Gather Description

  Ask for description:
  - "Provide a description (optional)"
  - "Tip: Include #shorts hashtag"

  **Store as**: `video_description` (optional)

  ### 4. Ask for Tags

  - "Add tags (optional, comma-separated)"
  - "Recommended: Include 'shorts' tag"

  **Example:** "shorts,vertical,quick,tutorial"

  **Store as**: `tags` (optional)

  ### 5. Validate Short Requirements

  ```javascript
  import { existsSync } from 'fs';
  import { stat } from 'fs/promises';

  const errors = [];
  const warnings = [];

  // Check video exists
  if (!existsSync(video_path)) {
    errors.push(`Video not found: ${video_path}`);
  } else {
    const stats = await stat(video_path);
    const sizeMB = stats.size / (1024 * 1024);

    console.log(`Video size: ${sizeMB.toFixed(1)}MB`);

    // Warn about file size (not a hard limit, just for info)
    if (sizeMB > 1000) {
      warnings.push(`Large file (${sizeMB.toFixed(1)}MB) - upload may take a while`);
    }
  }

  // Check title
  if (!video_title || video_title.trim().length === 0) {
    errors.push('Title is required');
  }

  // Check for #shorts in title or description
  const hasShortsTitleTag = video_title.toLowerCase().includes('#shorts');
  const hasShortsDescTag = video_description && video_description.toLowerCase().includes('#shorts');

  if (!hasShortsTitleTag && !hasShortsDescTag) {
    warnings.push('Consider adding #shorts to title or description for better promotion');
  }

  if (errors.length > 0) {
    console.log('✗ Validation errors:');
    errors.forEach(error => console.log(`  - ${error}`));
    return;
  }

  if (warnings.length > 0) {
    console.log('⚠️  Warnings:');
    warnings.forEach(warning => console.log(`  - ${warning}`));
  }

  // Important reminder
  console.log();
  console.log('📱 YouTube Shorts Requirements:');
  console.log('  ✓ Aspect ratio: 9:16 (vertical)');
  console.log('  ✓ Duration: ≤180 seconds (3 minutes)');
  console.log('  ✓ Orientation: Taller than wide');
  console.log();
  console.log('If your video meets these, YouTube auto-detects it as a Short!');
  console.log('If not, it will be a regular video.');
  ```

  ### 6. Show Preview

  ```
  Preview:
  ─────────────────────────────────────────
  Platform: YouTube Shorts
  Video: [filename] (X MB)
  Title: [video_title]
  Description: [video_description]
  Tags: [tags]
  Privacy: [privacy] → Will be Private initially

  Requirements Check:
  ✓ Must be 9:16 aspect ratio
  ✓ Must be ≤3 minutes duration
  ✓ Must be vertical orientation

  YouTube auto-detects Shorts - no special parameters needed!
  ─────────────────────────────────────────
  ```

  Ask for confirmation: "Upload this Short to YouTube? [yes/no]"

  ### 7. Upload Short

  ```javascript
  console.log('Uploading Short to YouTube...');
  console.log('Note: YouTube uses same upload process for Shorts and regular videos');
  console.log('Shorts are auto-detected based on aspect ratio and duration');
  console.log();

  const result = await mcp__youtube-uploader-mcp__upload_video({
    file_path: video_path,
    title: video_title,
    description: video_description || '#shorts',
    category_id: category_id || '22',
    tags: tags ? `shorts,${tags}` : 'shorts',
    privacy: privacy || 'unlisted',
    made_for_kids: false,
    channel_id: 'UCeNChkI6YhgS4zFrjOICcLw'
  });

  if (result && result.id) {
    console.log('✅ Short uploaded to YouTube successfully!');
    console.log();
    console.log('Details:');
    console.log(`  Video ID: ${result.id}`);
    console.log(`  Title: ${result.title}`);
    console.log(`  Privacy: ${result.privacy_status}`);
    console.log();
    console.log('Watch URL:');
    console.log(`  https://www.youtube.com/watch?v=${result.id}`);
    console.log(`  https://www.youtube.com/shorts/${result.id}`);
    console.log();
    console.log('Edit in YouTube Studio:');
    console.log(`  https://studio.youtube.com/video/${result.id}/edit`);
    console.log();
    console.log('📱 YouTube Shorts Detection:');
    console.log('  If your video is 9:16 and ≤3 minutes, it will appear in:');
    console.log('    ✓ YouTube Shorts feed');
    console.log('    ✓ Shorts tab on your channel');
    console.log('    ✓ Mobile Shorts shelf');

    if (result.privacy_status === 'private') {
      console.log();
      console.log('⚠️  Video uploaded as PRIVATE');
      console.log('To publish:');
      console.log('  1. Go to Studio link above');
      console.log('  2. Change visibility to Public');
      console.log('  3. Save');
    }
  } else {
    console.log('✗ Failed to upload Short');
    console.log(`  Error: ${result?.error || 'Upload failed'}`);
  }
  ```

  ## Example Usage

  ```
  User: "I want to upload a YouTube Short"

  Agent: "Provide the path to your Short video"

  User: "/Users/sid/Desktop/my-short-vertical.mp4"

  Agent: "What's the title for your Short?"

  User: "Quick Tip: Social Media Automation #shorts"

  Agent: "Provide a description (optional)"

  User: "Learn how to automate your social media in 60 seconds! #shorts #automation #tutorial"

  Agent: "Add tags (optional)"

  User: "shorts,automation,tips,quick,vertical"

  Agent: "Select privacy: 1) Public 2) Unlisted 3) Private"

  User: "1"

  Agent:
  Preview:
  ─────────────────────────────────────────
  Platform: YouTube Shorts
  Video: my-short-vertical.mp4 (8.5 MB)
  Title: Quick Tip: Social Media Automation #shorts
  Description: Learn how to automate...
  Tags: shorts,automation,tips,quick,vertical
  Privacy: public → Will be Private initially
  ─────────────────────────────────────────

  Upload this Short to YouTube? [yes/no]

  User: "yes"

  Agent: "Uploading Short to YouTube..."

  ✅ Short uploaded to YouTube successfully!

  Details:
    Video ID: xyz789abc
    Title: Quick Tip: Social Media Automation #shorts
    Privacy: private

  Watch URL:
    https://www.youtube.com/watch?v=xyz789abc
    https://www.youtube.com/shorts/xyz789abc

  📱 YouTube Shorts Detection:
    If your video is 9:16 and ≤3 minutes, it will appear in:
      ✓ YouTube Shorts feed
      ✓ Shorts tab on your channel

  ⚠️  Video uploaded as PRIVATE
  To publish: Go to Studio and change to Public
  ```

  ## YouTube Shorts Requirements

  **For automatic Shorts detection:**

  | Requirement | Value | Auto-Detected |
  |-------------|-------|---------------|
  | **Aspect Ratio** | 9:16 or 1:1 | ✅ Yes |
  | **Resolution** | 1080x1920 recommended | ✅ Yes |
  | **Duration** | ≤180 seconds (3 min) | ✅ Yes |
  | **Orientation** | Vertical (taller than wide) | ✅ Yes |

  **Optional (but recommended):**
  - Title includes #shorts or #Shorts
  - Description includes #shorts
  - Tags include "shorts"

  ## Shorts vs Regular Videos

  **Same upload process!** YouTube decides based on:

  ```
  IF aspect_ratio == 9:16 AND duration <= 180sec:
      → Classified as SHORT
      → Shows in Shorts feed
  ELSE:
      → Regular video
      → Shows in main feed
  ```

  **No special API parameters needed!**

  ## Creating Shorts

  **From existing videos:**
  ```bash
  # Crop 16:9 to 9:16 with FFmpeg
  ffmpeg -i input.mp4 -vf "crop=ih*9/16:ih" -c:a copy output-short.mp4
  ```

  **Recommended tools:**
  - CapCut
  - Adobe Premiere Pro
  - Final Cut Pro
  - DaVinci Resolve
  - FFmpeg (command line)

  ## Tips for Successful Shorts

  1. **Hook First 3 Seconds**: Grab attention immediately
  2. **Vertical Framing**: Fill mobile screen
  3. **Text Overlays**: Many watch without sound
  4. **Keep it Snappy**: Even though limit is 3 min, shorter often performs better
  5. **Trending Audio**: Use popular sounds if applicable

  ## Common Issues

  ### "Video not vertical"
  - Check aspect ratio is 9:16 or 1:1
  - Video must be taller than wide
  - Use video editor to crop/resize

  ### "Duration too long"
  - Shorts must be ≤180 seconds (3 minutes)
  - Edit video to shorten
  - Or upload as regular video instead

  ### "Doesn't appear in Shorts feed"
  - Wait 1-2 hours for processing
  - Check aspect ratio is correct
  - Ensure duration ≤3 minutes
  - Add #shorts to title

  ## Processing Time

  - Upload: Same as regular videos
  - Shorts feed: May take 1-2 hours to appear
  - Watch page: Available immediately

  ## Notes

  - Uses same upload_video tool as regular videos
  - YouTube detects Shorts automatically
  - No special parameters needed
  - Appears in both regular and Shorts feeds
  - Great for mobile-first content
