---
description: BMAD STANDALONE: MCP_QUICK_REFERENCE
globs: 
alwaysApply: false
---

# MCP Image Generation - Quick Reference

**Status:** ‚úÖ WORKING (Verified 2025-10-25)

Use this guide for all image generation with MCP servers.

---

## üéØ **Correct Tool Names** (VERIFIED)

### OpenAI gpt-image-1

```
Tool: mcp__gpt-image-1__create_image
```

### Gemini Nanobanana

```
Tool: mcp__nanobanana__generate_image
```

---

## üìã **OpenAI gpt-image-1 Usage**

### Basic Generation

```typescript
mcp__gpt-image-1__create_image({
  prompt: "Your detailed prompt here",
  size: "1024x1024" | "1024x1536" | "1536x1024",
  quality: "low" | "medium" | "high" | "auto",
  output_format: "png" | "jpeg" | "webp"
})
```

### With All Parameters

```typescript
mcp__gpt-image-1__create_image({
  prompt: "Professional tech carousel slide, 1536x1024px landscape, dark background #0B0B0B...",
  size: "1536x1024",
  quality: "high",
  n: 1,
  output_format: "png",
  background: "opaque",
  moderation: "auto",
  output_compression: 85
})
```

### Output

```json
{
  "file_paths": ["/Users/sid/Pictures/gpt-image-1/gpt-images/image-2025-10-25T21-17-14-928Z.png"],
  "metadata": {...},
  "token_usage": {...}
}
```

---

## üìã **Nanobanana Usage**

### Basic Generation

```typescript
mcp__nanobanana__generate_image({
  prompt: 'Your prompt here',
  n: 1,
});
```

### With Negative Prompts

```typescript
mcp__nanobanana__generate_image({
  prompt: 'Dark tech slide with minimal design',
  negative_prompt: 'cluttered, colorful, gradients, cartoons, 3D renders',
  n: 1,
});
```

### Image Editing

```typescript
mcp__nanobanana__generate_image({
  prompt: 'Change background to dark black, keep subject sharp',
  input_image_path_1: '/path/to/original.png',
  mode: 'edit',
});
```

### Output

```json
{
  "file_paths": ["/Users/sid/nanobanana-images/gen_20251025_141918_1_1_e5025389.png"],
  "files_api_ids": ["files/3zc0xjvbhoqo"],
  "total_size_mb": 0.25
}
```

---

## üîÑ **Workflow for Agent**

### Step 1: Load Template

```
Read: {agent-folder}/templates/your-template.json
```

### Step 2: Validate & Map Size

```
aspect_ratio = template.platform_specs.aspect_ratio
size = map_to_supported_size(aspect_ratio)
```

### Step 3: Generate with MCP

```
result = mcp__gpt-image-1__create_image({
  prompt: constructed_prompt,
  size: validated_size,
  quality: "high",
  output_format: "png"
})
```

### Step 4: Copy to Agent Outputs

```
Bash: cp {result.file_paths[0]} {agent_output_folder}/{slide_name}.png
```

### Step 5: Create Metadata

```
Write: {agent_output_folder}/{slide_name}_metadata.json
Content: {
  "mcp_output_path": result.file_paths[0],
  "prompt": prompt,
  "size": size,
  "provider": "openai",
  "timestamp": now,
  ...
}
```

---

## ‚ö° **Performance Comparison**

| Metric          | OpenAI (MCP) | OpenAI (curl) | Nanobanana (MCP) |
| --------------- | ------------ | ------------- | ---------------- |
| **Speed**       | 2-3 seconds  | 60-90 seconds | 2-3 seconds      |
| **Quality**     | High         | High          | High             |
| **File Size**   | 1-2MB        | 1-2MB         | 250-500KB        |
| **Ease of Use** | ‚úÖ Easy      | ‚ùå Complex    | ‚úÖ Easy          |

**MCP is MUCH faster!** (30x speed improvement)

---

## üé® **Complete Example: LinkedIn Carousel**

```typescript
// Load template
template = Read("templates/TEST-linkedin-carousel-ai-agents.json")

// For each slide
for (slide in template.slides) {
  // Construct prompt
  prompt = slide.prompt
  negative = slide.negative_prompt.join(", ")
  full_prompt = prompt + " Negative: " + negative

  // Generate via MCP
  result = mcp__gpt-image-1__create_image({
    prompt: full_prompt,
    size: "1536x1024",
    quality: "high",
    output_format: "png"
  })

  // Copy to agent folder
  Bash: cp {result.file_paths[0]} outputs/carousel/slide{N}.png

  // Save metadata
  Write: outputs/carousel/slide{N}_metadata.json
  Content: {
    slide_number: N,
    mcp_file: result.file_paths[0],
    prompt: full_prompt,
    ...
  }

  // Progress
  Show: "‚úÖ Slide {N} complete!"
}
```

---

## üö® **Important Notes**

### File Locations

- MCP saves to its own folders (not agent outputs/)
- Agent must COPY files to proper location
- Or update agent to reference MCP locations directly

### API Keys

- Stored in `~/.claude.json` under `env` for each server
- Loaded automatically by MCP
- No need to pass in tool calls

### Negative Prompts

- OpenAI: Include in main prompt string
- Nanobanana: Use separate `negative_prompt` parameter (better!)

### Image Editing

- OpenAI: No direct editing support via MCP
- Nanobanana: Full editing with `input_image_path` + `mode: "edit"`

---

## üîß **Troubleshooting**

### "Tool not found"

- Restart Claude Code
- Run `claude mcp list` to verify connection
- Check ~/.claude.json has correct config

### "Authentication error"

- Verify API keys in ~/.claude.json
- Test keys with direct API call
- Regenerate if exposed

### "File not saved"

- Check output folder permissions
- Verify ~/Pictures/gpt-image-1/ exists
- Check ~/nanobanana-images/ exists

---

**MCP servers are WORKING! Update agent to use correct tool names and you're ready to generate!** üöÄ
