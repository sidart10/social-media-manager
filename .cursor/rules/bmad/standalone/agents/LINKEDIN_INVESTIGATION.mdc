---
description: BMAD STANDALONE: LINKEDIN_INVESTIGATION
globs: 
alwaysApply: false
---

# LinkedIn API - Personal Account Posting Investigation

**Date:** 2025-10-25
**Status:** ‚úÖ Personal account posting IS possible
**Recommendation:** Build custom module like Twitter

---

## üéØ Key Findings

### ‚úÖ YES - You Can Post to Your Personal LinkedIn Account!

**Permission Required:** `w_member_social`

**What it does:** "Post, comment and like posts on behalf of an authenticated member"

**Access Level:** **Open Permission** (No special approval needed!)

**How to Enable:**

1. Go to LinkedIn Developer Portal
2. Select your app
3. Go to "Products" tab
4. Enable **"Share on LinkedIn"** product
5. This automatically grants `w_member_social` scope

---

## üîç How LinkedIn Personal Posting Works

### OAuth Flow (Your Use Case)

1. **Create LinkedIn App** ‚úÖ (You have this - Client ID: 86litgbscvi400)
2. **Enable Products:**
   - "Share on LinkedIn" ‚Üí Grants `w_member_social`
   - "Sign In with LinkedIn using OpenID Connect" ‚Üí Grants `openid`, `profile`, `email`

3. **OAuth 2.0 Flow:**

   ```
   User authorizes app ‚Üí Get access token ‚Üí Post on behalf of user
   ```

4. **Post to YOUR account:**
   ```
   POST /v2/ugcPosts
   Body: {
     "author": "urn:li:person:YOUR_ID",
     "lifecycleState": "PUBLISHED",
     "specificContent": {...},
     "visibility": {...}
   }
   ```

### Required Scopes

```
openid profile w_member_social
```

- **openid + profile**: Get your user ID
- **w_member_social**: Post on your behalf

---

## üìä LinkedIn MCP Server Analysis

### What linkedin-mcp Does

According to the PyPI page, it provides:

- `authenticate` - OAuth flow
- `create_post` - Post with optional media

**Issue:** Python environment conflicts preventing it from running

**Your Options:**

### Option A: Fix linkedin-mcp Python Issues (30 min - 1 hour)

- Debug Python path conflicts
- May require virtual environment
- MCP server should work once fixed

### Option B: Build Custom LinkedIn Module (1.5-2 hours)

- Like Twitter API client
- Direct control
- No Python dependency
- Full feature support

### Option C: Use LinkedIn's Token Generator (Quick Test)

- Generate token manually from developer portal
- Test posting directly
- Not automated (manual token refresh)

---

## üõ†Ô∏è Recommended Approach: Build Custom LinkedIn Module

### Why (Same reasons as Twitter):

‚úÖ **Full control** over features
‚úÖ **No MCP server issues** to debug
‚úÖ **Similar to Twitter** implementation (you already know the pattern)
‚úÖ **Production-ready** with proper error handling
‚úÖ **Image/video support** built-in

### Implementation (Following Twitter Pattern)

**Module:** `bmad/modules/linkedin-api-client/`

**Features:**

- OAuth 2.0 flow
- Post text-only
- Post with images (Assets API)
- Post with videos
- Get user ID
- Track rate limits

**Time:** 1.5-2 hours (same as Twitter)

**Library:** Use `axios` + OAuth 2.0 (simpler than Twitter's OAuth 1.0a)

---

## üìö LinkedIn API Technical Details

### Endpoints Needed

#### 1. Get User Info

```
GET https://api.linkedin.com/v2/userinfo
Scope: openid, profile
Returns: sub (your user ID URN)
```

#### 2. Upload Image (Assets API)

```
POST https://api.linkedin.com/v2/assets?action=registerUpload
POST {upload_url} (binary upload)
Returns: asset URN
```

#### 3. Create Post (UGC Posts API)

```
POST https://api.linkedin.com/v2/ugcPosts
Body: {
  "author": "urn:li:person:YOUR_ID",
  "lifecycleState": "PUBLISHED",
  "specificContent": {
    "com.linkedin.ugc.ShareContent": {
      "shareCommentary": {
        "text": "Your post text"
      },
      "shareMediaCategory": "IMAGE",
      "media": [{
        "status": "READY",
        "media": "urn:li:digitalmediaAsset:ASSET_ID"
      }]
    }
  },
  "visibility": {
    "com.linkedin.ugc.MemberNetworkVisibility": "PUBLIC"
  }
}
```

---

## üîê Authentication (OAuth 2.0)

**Much simpler than Twitter!**

### Step 1: Authorization URL

```
https://www.linkedin.com/oauth/v2/authorization?
  response_type=code
  &client_id=86litgbscvi400
  &redirect_uri=http://localhost:3000/callback
  &scope=openid%20profile%20w_member_social
```

### Step 2: Exchange Code for Token

```javascript
POST https://www.linkedin.com/oauth/v2/accessToken
Body: {
  grant_type: "authorization_code",
  code: "AUTHORIZATION_CODE",
  client_id: "86litgbscvi400",
  client_secret: "YOUR_LINKEDIN_CLIENT_SECRET",
  redirect_uri: "http://localhost:3000/callback"
}

Response: {
  access_token: "YOUR_ACCESS_TOKEN",
  expires_in: 5184000  // 60 days
}
```

### Step 3: Use Access Token

```javascript
Authorization: Bearer YOUR_ACCESS_TOKEN
```

---

## üìù LinkedIn vs Twitter Comparison

| Feature           | Twitter                | LinkedIn           |
| ----------------- | ---------------------- | ------------------ |
| **Auth**          | OAuth 1.0a (complex)   | OAuth 2.0 (simple) |
| **Signature**     | HMAC-SHA1 per request  | Bearer token only  |
| **Media Upload**  | Separate v1.1 endpoint | Assets API         |
| **Post Endpoint** | /2/tweets              | /v2/ugcPosts       |
| **Complexity**    | Medium                 | **Easier!**        |

**LinkedIn is actually SIMPLER than Twitter!**

---

## üöÄ Implementation Plan for LinkedIn

### Module Structure (Same as Twitter)

```
bmad/modules/linkedin-api-client/
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ index.js
‚îú‚îÄ‚îÄ config.js
‚îú‚îÄ‚îÄ lib/
‚îÇ   ‚îú‚îÄ‚îÄ client.js          # LinkedIn OAuth + posting
‚îÇ   ‚îú‚îÄ‚îÄ auth.js            # OAuth 2.0 flow
‚îÇ   ‚îú‚îÄ‚îÄ assets.js          # Image/video upload
‚îÇ   ‚îî‚îÄ‚îÄ validator.js       # Input validation
‚îî‚îÄ‚îÄ __tests__/
    ‚îú‚îÄ‚îÄ integration.test.js
    ‚îî‚îÄ‚îÄ validator.test.js
```

### Dependencies

```json
{
  "dependencies": {
    "axios": "^1.6.0",
    "form-data": "^4.0.0"
  }
}
```

**No special OAuth library needed!** Just axios for HTTP requests.

---

## üíª Code Examples (Simplified)

### OAuth Flow (auth.js)

```javascript
import axios from 'axios';

export async function getAuthorizationUrl(clientId, redirectUri) {
  const params = new URLSearchParams({
    response_type: 'code',
    client_id: clientId,
    redirect_uri: redirectUri,
    scope: 'openid profile w_member_social',
  });

  return `https://www.linkedin.com/oauth/v2/authorization?${params}`;
}

export async function exchangeCodeForToken(code, clientId, clientSecret, redirectUri) {
  const response = await axios.post('https://www.linkedin.com/oauth/v2/accessToken', null, {
    params: {
      grant_type: 'authorization_code',
      code: code,
      client_id: clientId,
      client_secret: clientSecret,
      redirect_uri: redirectUri,
    },
  });

  return response.data.access_token;
}
```

### Get User ID

```javascript
export async function getUserId(accessToken) {
  const response = await axios.get('https://api.linkedin.com/v2/userinfo', {
    headers: { Authorization: `Bearer ${accessToken}` },
  });

  return response.data.sub; // Returns person URN
}
```

### Post Text-Only

```javascript
export async function createPost(accessToken, userId, text) {
  const payload = {
    author: userId,
    lifecycleState: 'PUBLISHED',
    specificContent: {
      'com.linkedin.ugc.ShareContent': {
        shareCommentary: {
          text: text,
        },
        shareMediaCategory: 'NONE',
      },
    },
    visibility: {
      'com.linkedin.ugc.MemberNetworkVisibility': 'PUBLIC',
    },
  };

  const response = await axios.post('https://api.linkedin.com/v2/ugcPosts', payload, {
    headers: {
      Authorization: `Bearer ${accessToken}`,
      'Content-Type': 'application/json',
      'X-Restli-Protocol-Version': '2.0.0',
    },
  });

  return response.data.id;
}
```

---

## ‚úÖ Your LinkedIn App Setup

Based on your screenshot, you have:

- ‚úÖ Client ID: 86litgbscvi400
- ‚úÖ Client Secret: YOUR_LINKEDIN_CLIENT_SECRET
- ‚úÖ Redirect URI: http://localhost:3000/callback
- ‚úÖ OAuth 2.0 configured

**What you need to verify:**

1. Go to LinkedIn Developer Portal
2. Check "Products" tab
3. Ensure **"Share on LinkedIn"** is enabled
4. This grants `w_member_social` permission

---

## üéØ Decision Time

### Option A: Build LinkedIn Module NOW (1.5-2 hours)

- Custom implementation like Twitter
- Full control and features
- No MCP server issues
- Posts to YOUR personal account ‚úÖ

### Option B: Debug linkedin-mcp (30 min - 1 hour)

- Fix Python environment
- Use existing MCP tools
- May have limitations

### Option C: Manual Token for Quick Test (15 min)

- Use LinkedIn's token generator
- Test posting manually
- Not automated (just for verification)

---

## üí° My Strong Recommendation: Option A

**Build the LinkedIn module** following the Twitter pattern:

- ‚úÖ You already know the pattern (just did it for Twitter)
- ‚úÖ LinkedIn is actually SIMPLER (OAuth 2.0 vs OAuth 1.0a)
- ‚úÖ No MCP Python conflicts
- ‚úÖ Posts to YOUR personal account
- ‚úÖ Full features (text, images, videos)

**Time:** 1.5-2 hours
**Confidence:** 9/10 (same as Twitter)
**Result:** Complete LinkedIn posting support

---

## üìö Reference Links

- [LinkedIn OAuth Guide](https://learn.microsoft.com/en-us/linkedin/shared/authentication/authentication)
- [UGC Posts API](https://learn.microsoft.com/en-us/linkedin/marketing/community-management/shares/ugc-post-api)
- [Share on LinkedIn Product](https://learn.microsoft.com/en-us/linkedin/shared/authentication/getting-access)
- [Recent Implementation Guide (Feb 2025)](https://marcusnoble.co.uk/2025-02-02-posting-to-linkedin-via-the-api/)

---

## üé¨ Next Steps

**If you choose Option A (Build LinkedIn Module):**

1. I'll create a PRP similar to Twitter
2. Implement in 1.5-2 hours
3. Test with your personal account
4. Integrate into Social Posting Agent

**If you choose Option B (Debug MCP):**

1. Fix Python environment
2. Test linkedin-mcp authenticate
3. Complete OAuth flow
4. Test posting

**If you choose Option C (Manual Test):**

1. Generate token from LinkedIn portal
2. Test POST /v2/ugcPosts manually
3. Verify it works
4. Then decide on automation approach

---

**What would you like to do?** ü§î
