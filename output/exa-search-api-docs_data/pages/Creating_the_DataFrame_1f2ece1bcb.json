{
  "title": "Creating the DataFrame",
  "content": "students_df = pd.DataFrame(sample_data)\nstudents_df\n\nPython Python theme={null}\ndef get_openai_response(input_text):\n    # if contents is empty\n    if not input_text:\n        return \"\"\n    completion = openai.chat.completions.create(\n            model=\"gpt-3.5-turbo-0125\",\n            messages=[\n                {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n                {\"role\": \"user\", \"content\": input_text},\n            ],\n            temperature=0\n        )\n    return completion.choices[0].message.content\n\nPython Python theme={null}\ndef extract_school_from_email(email):\n  content =  f\"I'm going to give you a student's email. I want you to figure out what school they go to. For example, if the email is [[emailÂ protected]](/cdn-cgi/l/email-protection) you should return 'CMU' and nothing else. Only return the name of the school. Here is their email: {email}\"\n  return get_openai_response(content)",
  "code_samples": [
    {
      "code": "## Information Enrichment\n\nNow, let's add more information about the candidates: current school, LinkedIn, and personal website.\n\nFirst, we'll define a helper function to call OpenAI -- we'll use this for many of our later functions.",
      "language": "unknown"
    },
    {
      "code": "We'll ask GPT to extract the candidate's school from their email address.",
      "language": "unknown"
    }
  ],
  "headings": [
    {
      "level": "h2",
      "text": "Information Enrichment",
      "id": "information-enrichment"
    }
  ],
  "url": "llms-txt#creating-the-dataframe",
  "links": []
}