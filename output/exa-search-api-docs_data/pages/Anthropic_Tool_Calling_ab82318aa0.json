{
  "title": "Anthropic Tool Calling",
  "content": "Source: https://docs.exa.ai/reference/anthropic-tool-calling\n\nUsing Claude's Tool Use Feature with Exa Search Integration.\n\nThis guide will show you how to properly set up and use Anthropic's and Exa's API client, and utilise Claude's function calling or tool use feature to perform Exa search integration. Here are the steps:\n\n1. Install the prerequisite packages and set up API keys as environment variables\n2. Understand how Claude's tool use feature works\n3. Use Exa within the tool use feature\n\n<Steps>\n  <Step title=\"Prerequisites and installation\">\n    Before you can use this guide you will need to have [python3](https://www.python.org/doc/) and [pip](https://pip.pypa.io/en/stable/installation/) installed on your machine.\n\nFor the purpose of this guide we will need to install:\n\n* `anthropic` library to perform Claude API calls and completions\n    * `exa_py` library to perform Exa search\n    * `rich` library to make the output more readable\n\nInstall the libraries.\n\nTo successfully use the Exa search client and Anthropic client you will need to have your `ANTHROPIC_API_KEY` and `EXA_API_KEY`\\\n    set as environment variables.\n\nTo get an Anthropic API key, you will first need an Anthropic account, visit the [Anthropic console](https://console.anthropic.com/settings/keys) to generate your API key.\n\nSimilarly, to get the Exa API key, you will first need an Exa account, visit the Exa dashboard to generate your API key.\n\n<Card title=\"Get your Exa API key\" icon=\"key\" horizontal href=\"https://dashboard.exa.ai/api-keys\" />\n\n> Be safe with your API keys. Make sure they are not hardcoded in your code or added to a git repository to prevent leaking them to the public.\n\nYou can create an `.env` file in the root of your project and add the following to it:\n\nMake sure to add your `.env` file to your `.gitignore` file if you have one.\n  </Step>\n\n<Step title=\"Understanding Claude's Tool Use Feature\">\n    Claude LLMs can call a function you have defined in your code; this is called [tool use](https://docs.anthropic.com/en/docs/build-with-claude/tool-use). To do this, you first need to describe the function you want to call to Claude's LLM. You can do this by defining a description object of the format:\n\nWhen this description is sent to Claude's LLM, it returns an object with a string, which is the function name defined in *your* code, and the arguments that the function takes. This does not execute or *call* functions on Anthropic's side; it only returns the function name and arguments which you will have to parse and call yourself in your code.\n\nWe will use the object of this format to call the `exa_search` function we define.\n  </Step>\n\n<Step title=\"Use Exa Search as Claude tool\">\n    First, we import and initialise the Anthropic and Exa libraries and load the stored API keys.\n\nNext, we define the function and the function schema so that Claude knows how to use it and what arguments our local function takes:\n\nFinally, we'll define the primer `SYSTEM_MESSAGE`, which explains to Claude what it is supposed to do:\n\nWe can now start writing the code needed to perform the LLM calls and the search. We'll create the `exa_search` function that will call Exa's `search_and_contents` function with the query:\n\nNext, we create a function to process the tool use:\n\nLastly, we'll create a `main` function to bring it all together, and handle the user input and interaction with Claude:\n\nThe implementation creates a loop that continually prompts the user for search queries, uses Claude's tool use feature to determine when to perform a search, and then uses the Exa search results to provide an informed response to the user's query.\n\nWe also use the rich library to provide a more visually appealing console interface, including coloured output and markdown rendering for the responses.\n  </Step>\n\n<Step title=\"Full code\">\n\nWe have now written an advanced search tool that combines the power of Claude's language models with Exa's semantic search capabilities, providing users with informative and context-aware responses to their queries.\n  </Step>\n\n<Step title=\"Running the code\">\n    Save the code in a file, e.g. `claude_search.py`, and make sure the `.env` file containing the API keys we previously created is in the same directory as the script.\n\nThen run the script using the following command from your terminal:\n\nYou should see a prompt:\n\nThat's it, enjoy your search agent!\n  </Step>\n</Steps>",
  "code_samples": [
    {
      "code": "To successfully use the Exa search client and Anthropic client you will need to have your `ANTHROPIC_API_KEY` and `EXA_API_KEY`\\\n    set as environment variables.\n\n    To get an Anthropic API key, you will first need an Anthropic account, visit the [Anthropic console](https://console.anthropic.com/settings/keys) to generate your API key.\n\n    Similarly, to get the Exa API key, you will first need an Exa account, visit the Exa dashboard to generate your API key.\n\n    <Card title=\"Get your Exa API key\" icon=\"key\" horizontal href=\"https://dashboard.exa.ai/api-keys\" />\n\n    > Be safe with your API keys. Make sure they are not hardcoded in your code or added to a git repository to prevent leaking them to the public.\n\n    You can create an `.env` file in the root of your project and add the following to it:",
      "language": "unknown"
    },
    {
      "code": "Make sure to add your `.env` file to your `.gitignore` file if you have one.\n  </Step>\n\n  <Step title=\"Understanding Claude's Tool Use Feature\">\n    Claude LLMs can call a function you have defined in your code; this is called [tool use](https://docs.anthropic.com/en/docs/build-with-claude/tool-use). To do this, you first need to describe the function you want to call to Claude's LLM. You can do this by defining a description object of the format:",
      "language": "unknown"
    },
    {
      "code": "When this description is sent to Claude's LLM, it returns an object with a string, which is the function name defined in *your* code, and the arguments that the function takes. This does not execute or *call* functions on Anthropic's side; it only returns the function name and arguments which you will have to parse and call yourself in your code.",
      "language": "unknown"
    },
    {
      "code": "We will use the object of this format to call the `exa_search` function we define.\n  </Step>\n\n  <Step title=\"Use Exa Search as Claude tool\">\n    First, we import and initialise the Anthropic and Exa libraries and load the stored API keys.",
      "language": "unknown"
    },
    {
      "code": "Next, we define the function and the function schema so that Claude knows how to use it and what arguments our local function takes:",
      "language": "unknown"
    },
    {
      "code": "Finally, we'll define the primer `SYSTEM_MESSAGE`, which explains to Claude what it is supposed to do:",
      "language": "unknown"
    },
    {
      "code": "We can now start writing the code needed to perform the LLM calls and the search. We'll create the `exa_search` function that will call Exa's `search_and_contents` function with the query:",
      "language": "unknown"
    },
    {
      "code": "Next, we create a function to process the tool use:",
      "language": "unknown"
    },
    {
      "code": "Lastly, we'll create a `main` function to bring it all together, and handle the user input and interaction with Claude:",
      "language": "unknown"
    },
    {
      "code": "The implementation creates a loop that continually prompts the user for search queries, uses Claude's tool use feature to determine when to perform a search, and then uses the Exa search results to provide an informed response to the user's query.\n\n    We also use the rich library to provide a more visually appealing console interface, including coloured output and markdown rendering for the responses.\n  </Step>\n\n  <Step title=\"Full code\">",
      "language": "unknown"
    },
    {
      "code": "We have now written an advanced search tool that combines the power of Claude's language models with Exa's semantic search capabilities, providing users with informative and context-aware responses to their queries.\n  </Step>\n\n  <Step title=\"Running the code\">\n    Save the code in a file, e.g. `claude_search.py`, and make sure the `.env` file containing the API keys we previously created is in the same directory as the script.\n\n    Then run the script using the following command from your terminal:",
      "language": "unknown"
    },
    {
      "code": "You should see a prompt:",
      "language": "unknown"
    },
    {
      "code": "Let's test it out.",
      "language": "unknown"
    }
  ],
  "headings": [
    {
      "level": "h2",
      "text": "Get Started",
      "id": "get-started"
    }
  ],
  "url": "llms-txt#anthropic-tool-calling",
  "links": []
}