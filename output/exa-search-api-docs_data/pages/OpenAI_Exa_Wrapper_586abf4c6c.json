{
  "title": "OpenAI Exa Wrapper",
  "content": "Source: https://docs.exa.ai/reference/openai\n\nEnhance your OpenAI chat completetions with a simple Exa wrapper that handles search, chunking and prompting.\n\nExa is designed from the ground up to enable seamless, accurate, and performant RAG (Retrieval-Augmented Generation). Exa provides factual, up to date information needed to ground LLM generations.\n\nBut good RAG requires more than just great search. The client needs to decide *when* to use RAG, with *what* queries. They need to handle chunking, prompting, and chaining LLM calls. We provide the Exa OpenAI wrapper that, **with one line of code**, does all that and turns any OpenAI chat completion into an Exa-powered RAG system.\n\nFirst, create an account and grab a free API key.\n\n<Card title=\"Get your Exa API key\" icon=\"key\" horizontal href=\"https://dashboard.exa.ai/api-keys\" />\n\n<Steps>\n  <Step title=\"Install the Exa and OpenAI python libraries\">\n    \n  </Step>\n\n<Step title=\"Instantiate Clients\">\n    Import and instantiate the Exa and OpenAI clients.\n\n<Note> Make sure to obtain your API keys from OpenAI and Exa and replace `OPENAI_API_KEY` and `EXA_API_KEY` with your actual keys.</Note>\n\n<Step title=\"Wrap the OpenAI client\">\n    The `Exa.wrap` method takes your existing OpenAI client and wraps it with Exa-powered RAG capabilities.\n\n<Step title=\"Call the wrapped client\">\n    The wrapped client works exactly like the native OpenAI client, except that it automatically improves your completions with relevant search results.\n\n<Info> The Exa OpenAI wrapper supports any model that [supports function calling](https://platform.openai.com/docs/guides/function-calling). </Info>\n\n<Step title=\"Example output\">\n    \n  </Step>\n\n<Step title=\"End-to-end code example\">\n    Below is a code block that puts together all of the above. You can copy it into any Python script or Jupyter notebook to test out a complete RAG example.\n\n<Step title=\"Example with multiple questions\">\n    Here is a slightly more advanced example that shows how to use the wrapper to answer multiple questions.\n\n## Further configuration options and advanced usage\n\nWhile the default settings work well for most use cases, the Exa OpenAI wrapper's `chat.completions.create()` method allows you to fine-tune the following parameters.\n\n## Option to include Exa results\n\n`use_exa` specifies whether to include Exa results for a given request:\n\n* `auto` Exa will intelligently determine whether to include results\n* `required` Exa results will always be included\n* `none` Exa results will never be included\n\n`num_results` specifies how many search results Exa should retrieve (defaults to 3 results). Limits vary by search type: with \"keyword\": max 10, with \"neural\": max 100. If you want to increase the num results, contact sales ([hello@exa.ai](mailto:hello@exa.ai))\n\n## Maximum result length\n\n`result_max_len` specifies the maximum length of each Exa result (defaults to 2048 characters).\n\n<Note> This is measured in characters, not tokens. </Note>\n\nThe Exa OpenAI wrapper supports any parameters that the `exa.search()` function accepts. You can find a list of all the parameters [here](./search).",
  "code_samples": [
    {
      "code": "</Step>\n\n  <Step title=\"Instantiate Clients\">\n    Import and instantiate the Exa and OpenAI clients.\n\n    <Note> Make sure to obtain your API keys from OpenAI and Exa and replace `OPENAI_API_KEY` and `EXA_API_KEY` with your actual keys.</Note>",
      "language": "unknown"
    },
    {
      "code": "</Step>\n\n  <Step title=\"Wrap the OpenAI client\">\n    The `Exa.wrap` method takes your existing OpenAI client and wraps it with Exa-powered RAG capabilities.",
      "language": "unknown"
    },
    {
      "code": "</Step>\n\n  <Step title=\"Call the wrapped client\">\n    The wrapped client works exactly like the native OpenAI client, except that it automatically improves your completions with relevant search results.\n\n    <Info> The Exa OpenAI wrapper supports any model that [supports function calling](https://platform.openai.com/docs/guides/function-calling). </Info>",
      "language": "unknown"
    },
    {
      "code": "</Step>\n\n  <Step title=\"Example output\">",
      "language": "unknown"
    },
    {
      "code": "</Step>\n\n  <Step title=\"End-to-end code example\">\n    Below is a code block that puts together all of the above. You can copy it into any Python script or Jupyter notebook to test out a complete RAG example.",
      "language": "unknown"
    },
    {
      "code": "</Step>\n\n  <Step title=\"Example with multiple questions\">\n    Here is a slightly more advanced example that shows how to use the wrapper to answer multiple questions.",
      "language": "unknown"
    },
    {
      "code": "</Step>\n</Steps>\n\n## Further configuration options and advanced usage\n\nWhile the default settings work well for most use cases, the Exa OpenAI wrapper's `chat.completions.create()` method allows you to fine-tune the following parameters.\n\n## Option to include Exa results\n\n`use_exa` specifies whether to include Exa results for a given request:\n\n* `auto` Exa will intelligently determine whether to include results\n* `required` Exa results will always be included\n* `none` Exa results will never be included",
      "language": "unknown"
    },
    {
      "code": "## Number of results\n\n`num_results` specifies how many search results Exa should retrieve (defaults to 3 results). Limits vary by search type: with \"keyword\": max 10, with \"neural\": max 100. If you want to increase the num results, contact sales ([hello@exa.ai](mailto:hello@exa.ai))",
      "language": "unknown"
    },
    {
      "code": "## Maximum result length\n\n`result_max_len` specifies the maximum length of each Exa result (defaults to 2048 characters).\n\n<Note> This is measured in characters, not tokens. </Note>",
      "language": "unknown"
    },
    {
      "code": "## Search parameters\n\nThe Exa OpenAI wrapper supports any parameters that the `exa.search()` function accepts. You can find a list of all the parameters [here](./search).",
      "language": "unknown"
    }
  ],
  "headings": [
    {
      "level": "h2",
      "text": "Get Started",
      "id": "get-started"
    },
    {
      "level": "h2",
      "text": "Further configuration options and advanced usage",
      "id": "further-configuration-options-and-advanced-usage"
    },
    {
      "level": "h2",
      "text": "Option to include Exa results",
      "id": "option-to-include-exa-results"
    },
    {
      "level": "h2",
      "text": "Number of results",
      "id": "number-of-results"
    },
    {
      "level": "h2",
      "text": "Maximum result length",
      "id": "maximum-result-length"
    },
    {
      "level": "h2",
      "text": "Search parameters",
      "id": "search-parameters"
    }
  ],
  "url": "llms-txt#openai-exa-wrapper",
  "links": []
}