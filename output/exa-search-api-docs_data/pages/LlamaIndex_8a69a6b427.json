{
  "title": "LlamaIndex",
  "content": "Source: https://docs.exa.ai/reference/llamaindex\n\nA quick-start guide on how to add Exa retrieval to a LlamaIndex Agent Application.\n\nLlamaIndex is a framework for building LLM applications powered by structured data. In this guide, we'll use Exa's LlamaIndex integration to:\n\n1. Specify Exa's Search and Retrieve Highlight Tool as a LlamaIndex retriever\n2. Set up an OpenAI Agent that uses this tool in its response generation\n\n<Steps>\n  <Step title=\"Pre-requisites and installation\">\n    Install the llama-index, llama-index core, llama-index-tools-exa libraries. OpenAI dependencies are within the core library, so we don't need to specify that.\n\nAlso ensure API keys are initialized properly. The following code uses the `EXA_API_KEY` as the relevant environment variable name.\n\n<Card title=\"Get your Exa API key\" icon=\"key\" horizontal href=\"https://dashboard.exa.ai/api-keys\" />\n  </Step>\n\n<Step title=\"Instantiate Exa tool\">\n    Import the relevant Exa integration library and instantiate LlamaIndex's `ExaToolSpec`.\n\n<Step title=\"Choose the Exa method to use\">\n    For this example, we are only interested in passing the [search\\_and\\_retrieve\\_highlights](./search) method to our agent, so we specify this using the `.to_tool_list`LlamaIndex method. We also pass `current_date`, a simple utility so our agent knows the current date.\n\n<Step title=\"Set up an OpenAI Agent and make Exa-powered requests\">\n    Set up the [OpenAIAgent](https://docs.llamaindex.ai/en/stable/examples/agent/Chatbot%5FSEC/), passing the filtered down toolset from above.\n\nWe can then use the chat method to interact with the agent.\n\n<Step title=\"Sample outputs\">\n    Output 1: Verbose output of agent operation\n\nOutput 2: Agent response\n\nAs you can see, the output generation is enriched with the context of our Exa Search query result!\n  </Step>\n</Steps>",
  "code_samples": [
    {
      "code": "Also ensure API keys are initialized properly. The following code uses the `EXA_API_KEY` as the relevant environment variable name.\n\n    <Card title=\"Get your Exa API key\" icon=\"key\" horizontal href=\"https://dashboard.exa.ai/api-keys\" />\n  </Step>\n\n  <Step title=\"Instantiate Exa tool\">\n    Import the relevant Exa integration library and instantiate LlamaIndex's `ExaToolSpec`.",
      "language": "unknown"
    },
    {
      "code": "</Step>\n\n  <Step title=\"Choose the Exa method to use\">\n    For this example, we are only interested in passing the [search\\_and\\_retrieve\\_highlights](./search) method to our agent, so we specify this using the `.to_tool_list`LlamaIndex method. We also pass `current_date`, a simple utility so our agent knows the current date.",
      "language": "unknown"
    },
    {
      "code": "</Step>\n\n  <Step title=\"Set up an OpenAI Agent and make Exa-powered requests\">\n    Set up the [OpenAIAgent](https://docs.llamaindex.ai/en/stable/examples/agent/Chatbot%5FSEC/), passing the filtered down toolset from above.",
      "language": "unknown"
    },
    {
      "code": "We can then use the chat method to interact with the agent.",
      "language": "unknown"
    },
    {
      "code": "</Step>\n\n  <Step title=\"Sample outputs\">\n    Output 1: Verbose output of agent operation",
      "language": "unknown"
    },
    {
      "code": "Output 2: Agent response",
      "language": "unknown"
    }
  ],
  "headings": [
    {
      "level": "h2",
      "text": "Get Started",
      "id": "get-started"
    }
  ],
  "url": "llms-txt#llamaindex",
  "links": []
}