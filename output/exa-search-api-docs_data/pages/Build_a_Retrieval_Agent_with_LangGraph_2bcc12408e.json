{
  "title": "Build a Retrieval Agent with LangGraph",
  "content": "Source: https://docs.exa.ai/examples/getting-started-with-rag-in-langgraph\n\n## What this doc covers\n\n* Brief intro to LangGraph\n* How to set up an agent in LangGraph with Exa search as a tool\n\nThis guide will show you how you can define and use Exa search within the LangGraph framework. This framework provides a straightforward way for you to define an AI agent and for it to retrieve high-quality, semantically matched content via Exa search.\n\n## Brief Intro to LangGraph\n\nBefore we dive into our implementation, a quick primer on the LangGraph framework.\n\nLangGraph is a powerful tool for building complex LLM-based agents. It allows for cyclical workflows, gives you granular control, and offers built-in persistence. This means you can create reliable agents with intricate logic, pause and resume execution, and even incorporate human oversight.\n\nRead more about [LangGraph here](https://langchain-ai.github.io/langgraph/)\n\n## Our Research Assistant Workflow\n\nFor our AI-powered research assistant, we're leveraging LangGraph's capabilities to create a workflow that combines an AI model (Claude) with a web search retrieval tool powered by Exa's API, to fetch, find and analyze any documents (in this case research on climate tech). Here's a visual representation of our workflow:\n\n![Alt text](https://files.readme.io/a2674bdce9b576860cd8eeec735ebd8959e8a8b41d4e5fab829dbbdcae37d6b0-Screenshot_2024-08-22_at_11.50.08.png)\n\nThis diagram illustrates how our workflow takes advantage of LangGraph's cycle support, allowing the agent to repeatedly use tools and make decisions until it has gathered sufficient information to provide a final response.\n\n## Let's break down what's happening in this simple workflow:\n\n1. We start at the Entry Point with a user query (e.g., \"Latest research papers on climate technology\").\n2. The Agent (our AI model) receives the query and decides what to do next.\n3. If the Agent needs more information, it uses the Web Search Retriever Tool to search for relevant documents.\n4. The Web Search Retriever Tool fetches information using Exa's semantic search capabilities.\n5. The Agent receives the fetched information and analyzes it.\n6. This process repeats until the Agent has enough information to provide a final response.\n\nIn the following sections, we'll explore the code implementation in detail, showing how we leverage LangGraph's features to create this advanced research assistant.\n\n## 1. Prerequisites and Installation\n\nBefore starting, ensure you have the required packages installed:\n\nMake sure to set up your API keys. For LangChain libraries, the environment variables should be named `ANTHROPIC_API_KEY` and `EXA_API_KEY` for Anthropic and Exa keys respectively.\n\n<Card title=\"Get your Exa API key\" icon=\"key\" horizontal href=\"https://dashboard.exa.ai/api-keys\" />\n\n## 2. Set Up Exa Search as a LangChain Tool\n\nAfter setting env variables, we can start configuring a search tool using `ExaSearchRetriever`. This tool ([read more here](https://api.python.langchain.com/en/latest/retrievers/langchain_exa.retrievers.ExaSearchRetriever.html)) will help retrieve relevant documents based on a query.\n\nFirst we need to import the required libraries:\n\nAfter we have imported the necessary libraries, we need to define and register a tool so that the agent know what tools it can use.\n\nWe use LangGraph `tool` decorator which you can read more about [here](https://python.langchain.com/v0.1/docs/modules/tools/custom_tools/#tool-decorator). The decorator uses the function name as the tool name. The docstring provides the agent with a tool description.\n\nThe `retriever` is where we initialize the Exa search retriever and configure it with parameters such as `highlights=True`. You can read more about all the available parameters [here](https://docs.exa.ai/reference/python-sdk-specification#input-parameters-1).\n\nHere, `ExaSearchRetriever` is set to fetch 3 documents.\n\nThen we use LangChain's `PromptTemplate` to structure the results from Exa in a more AI friendly way. Creating and using this template is optional, but recommended. Read more about PromptTemplate ([here](https://python.langchain.com/v0.1/docs/modules/model_io/prompts/quick_start/#).\n\nWe also use a RunnableLambda to extract necessary metadata (like URL and highlights) from the search results and format it using the prompt template.\n\nAfter all of this we start the retrieval and processing chain and store the results in the `documents` variable which is returned.\n\n## 3. Creating a Toolchain with LangGraph\n\nNow let's set up the complete toolchain using LangGraph.\n\n```python  theme={null}\nfrom typing import Literal\nfrom langchain_anthropic import ChatAnthropic\nfrom langchain_core.messages import HumanMessage\nfrom langgraph.checkpoint.memory import MemorySaver\nfrom langgraph.graph import END, MessagesState, StateGraph\nfrom langgraph.prebuilt import ToolNode",
  "code_samples": [
    {
      "code": "Make sure to set up your API keys. For LangChain libraries, the environment variables should be named `ANTHROPIC_API_KEY` and `EXA_API_KEY` for Anthropic and Exa keys respectively.\n\n<Card title=\"Get your Exa API key\" icon=\"key\" horizontal href=\"https://dashboard.exa.ai/api-keys\" />",
      "language": "unknown"
    },
    {
      "code": "## 2. Set Up Exa Search as a LangChain Tool\n\nAfter setting env variables, we can start configuring a search tool using `ExaSearchRetriever`. This tool ([read more here](https://api.python.langchain.com/en/latest/retrievers/langchain_exa.retrievers.ExaSearchRetriever.html)) will help retrieve relevant documents based on a query.\n\nFirst we need to import the required libraries:",
      "language": "unknown"
    },
    {
      "code": "After we have imported the necessary libraries, we need to define and register a tool so that the agent know what tools it can use.\n\nWe use LangGraph `tool` decorator which you can read more about [here](https://python.langchain.com/v0.1/docs/modules/tools/custom_tools/#tool-decorator). The decorator uses the function name as the tool name. The docstring provides the agent with a tool description.\n\nThe `retriever` is where we initialize the Exa search retriever and configure it with parameters such as `highlights=True`. You can read more about all the available parameters [here](https://docs.exa.ai/reference/python-sdk-specification#input-parameters-1).",
      "language": "unknown"
    },
    {
      "code": "Here, `ExaSearchRetriever` is set to fetch 3 documents.\n\nThen we use LangChain's `PromptTemplate` to structure the results from Exa in a more AI friendly way. Creating and using this template is optional, but recommended. Read more about PromptTemplate ([here](https://python.langchain.com/v0.1/docs/modules/model_io/prompts/quick_start/#).\n\nWe also use a RunnableLambda to extract necessary metadata (like URL and highlights) from the search results and format it using the prompt template.\n\nAfter all of this we start the retrieval and processing chain and store the results in the `documents` variable which is returned.\n\n## 3. Creating a Toolchain with LangGraph\n\nNow let's set up the complete toolchain using LangGraph.",
      "language": "unknown"
    }
  ],
  "headings": [
    {
      "level": "h2",
      "text": "What this doc covers",
      "id": "what-this-doc-covers"
    },
    {
      "level": "h2",
      "text": "Guide",
      "id": "guide"
    },
    {
      "level": "h2",
      "text": "Brief Intro to LangGraph",
      "id": "brief-intro-to-langgraph"
    },
    {
      "level": "h2",
      "text": "Our Research Assistant Workflow",
      "id": "our-research-assistant-workflow"
    },
    {
      "level": "h2",
      "text": "Let's break down what's happening in this simple workflow:",
      "id": "let's-break-down-what's-happening-in-this-simple-workflow:"
    },
    {
      "level": "h2",
      "text": "1. Prerequisites and Installation",
      "id": "1.-prerequisites-and-installation"
    },
    {
      "level": "h2",
      "text": "2. Set Up Exa Search as a LangChain Tool",
      "id": "2.-set-up-exa-search-as-a-langchain-tool"
    },
    {
      "level": "h2",
      "text": "3. Creating a Toolchain with LangGraph",
      "id": "3.-creating-a-toolchain-with-langgraph"
    }
  ],
  "url": "llms-txt#build-a-retrieval-agent-with-langgraph",
  "links": []
}