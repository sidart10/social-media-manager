{
  "title": "Example usage",
  "content": "context = get_code_context(\"Express.js middleware for authentication\")\nprint(context)\njavascript  theme={null}\nasync function getCodeContext(query, tokensNum = \"dynamic\") {\n  const response = await fetch(\"https://api.exa.ai/context\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-api-key\": \"YOUR_API_KEY\"\n    },\n    body: JSON.stringify({\n      query,\n      tokensNum\n    })\n  });\n  \n  const result = await response.json();\n  return result.response;\n}\n\n// Example usage\nconst context = await getCodeContext(\"Svelte component lifecycle methods\");\nconsole.log(context);\n```\n\nVibe coding should never have a bad vibe. `exa-code` is a huge step towards coding agents that never hallucinate.\n\nWhen your coding agent makes a search query, `exa-code` searches over billions of GitHub repos, docs pages, Stack Overflow posts, and more, to find the perfect, token-efficient context that the agent needs to code correctly. It's powered by the Exa search engine.\n\nYou can also use `exa-code` through the [Exa MCP server](https://docs.exa.ai/reference/exa-mcp) for seamless integration with AI coding assistants like Claude, Cursor, and other MCP-compatible clients.\n\nThe MCP integration provides the same powerful code context search capabilities directly within your development environment without needing to make direct API calls.",
  "code_samples": [
    {
      "code": "**Using with JavaScript/Node.js**",
      "language": "unknown"
    }
  ],
  "headings": [
    {
      "level": "h2",
      "text": "About Exa Code",
      "id": "about-exa-code"
    },
    {
      "level": "h2",
      "text": "Use with MCP",
      "id": "use-with-mcp"
    }
  ],
  "url": "llms-txt#example-usage",
  "links": []
}