{
  "title": "LLM prompt for writing Python",
  "content": "Source: https://docs.exa.ai/websets/api/LLM\n\nTo teach LLMs how to use the Websets API. Best with powerful reasoning models.\n\nThe following text is a Git repository with code. The structure of the text are sections that begin with ----, followed by a single line containing the file path and file name, followed by a variable amount of lines containing the file contents. The text representing the Git repository ends when the symbols --END-- are encounted. Any further text beyond --END-- are meant to be interpreted as instructions using the aforementioned Git repository as context.\n\n[client.py](http://client.py)\n\nfrom **future** import annotations\n\nfrom datetime import datetime\n\nfrom typing import List, Optional, Literal, Dict, Any, Union\n\nCreateWebsetParameters,\n\nfrom .core.base import WebsetsBaseClient\n\nfrom .items import WebsetItemsClient\n\nfrom .searches import WebsetSearchesClient\n\nfrom .enrichments import WebsetEnrichmentsClient\n\nfrom .webhooks import WebsetWebhooksClient\n\nclass WebsetsClient(WebsetsBaseClient):\n\n\"\"\"Client for managing Websets.\"\"\"\n\ndef **init**(self, client):\n\nsuper().\\__init_\\_(client)\n\nself.items = WebsetItemsClient(client)\n\nself.searches = WebsetSearchesClient(client)\n\nself.enrichments = WebsetEnrichmentsClient(client)\n\nself.webhooks = WebsetWebhooksClient(client)\n\ndef create(self, params: Union[Dict[str, Any], CreateWebsetParameters]) -\\> Webset:\n\n\"\"\"Create a new Webset.\n\nparams (CreateWebsetParameters): The parameters for creating a webset.\n\nWebset: The created webset.\n\nresponse = self.request(\"/v0/websets\", data=params)\n\nreturn Webset.model_validate(response)\n\ndef get(self, id: str, \\*, expand: Optional[List[Literal[\"items\"]]] = None) -\\> GetWebsetResponse:\n\n\"\"\"Get a Webset by ID.\n\nid (str): The id or externalId of the Webset.\n\nexpand (List[Literal[\"items\"]], optional): Expand the response with specified resources.\n\nAllowed values: [\"items\"]\n\nGetWebsetResponse: The retrieved webset.\n\nparams = {\"expand\": expand} if expand else {}\n\nresponse = self.request(f\"/v0/websets/{id}\", params=params, method=\"GET\")\n\nreturn GetWebsetResponse.model_validate(response)\n\ndef list(self, \\*, cursor: Optional[str] = None, limit: Optional[int] = None) -\\> ListWebsetsResponse:\n\ncursor (str, optional): The cursor to paginate through the results.\n\nlimit (int, optional): The number of results to return (max 200).\n\nListWebsetsResponse: List of websets.\n\nparams = {k: v for k, v in {\"cursor\": cursor, \"limit\": limit}.items() if v is not None}\n\nresponse = self.request(\"/v0/websets\", params=params, method=\"GET\")\n\nreturn ListWebsetsResponse.model_validate(response)\n\ndef update(self, id: str, params: Union[Dict[str, Any], UpdateWebsetRequest]) -\\> Webset:\n\nid (str): The id or externalId of the Webset.\n\nparams (UpdateWebsetRequest): The parameters for updating a webset.\n\nWebset: The updated webset.\n\nresponse = self.request(f\"/v0/websets/{id}\", data=params, method=\"POST\")\n\nreturn Webset.model_validate(response)\n\ndef delete(self, id: str) -\\> Webset:\n\nid (str): The id or externalId of the Webset.\n\nWebset: The deleted webset.\n\nresponse = self.request(f\"/v0/websets/{id}\", method=\"DELETE\")\n\nreturn Webset.model_validate(response)\n\ndef cancel(self, id: str) -\\> Webset:\n\n\"\"\"Cancel a running Webset.\n\nid (str): The id or externalId of the Webset.\n\nWebset: The canceled webset.\n\nresponse = self.request(f\"/v0/websets/{id}/cancel\", method=\"POST\")\n\nreturn Webset.model_validate(response)\n\ndef wait_until_idle(self, id: str, \\*, timeout: int = 3600, poll_interval: int = 5) -\\> Webset:\n\n\"\"\"Wait until a Webset is idle.\n\nid (str): The id or externalId of the Webset.\n\ntimeout (int, optional): Maximum time to wait in seconds. Defaults to 3600.\n\npoll_interval (int, optional): Time to wait between polls in seconds. Defaults to 5.\n\nWebset: The webset once it's idle.\n\nTimeoutError: If the webset does not become idle within the timeout period.\n\nstart_time = time.time()\n\nwebset = self.get(id)\n\nif webset.status == WebsetStatus.idle.value:\n\nif time.time() - start_time \\> timeout:\n\nraise TimeoutError(f\"Webset {id} did not become idle within {timeout} seconds\")\n\ntime.sleep(poll_interval)\n\nfrom .client import WebsetsClient\n\n[types.py](http://types.py)\n\nfrom **future** import annotations\n\nfrom datetime import datetime\n\nfrom enum import Enum\n\nfrom typing import Any, Dict, List, Literal, Optional, Union\n\nfrom pydantic import AnyUrl, Field, confloat, constr\n\nfrom .core.base import ExaBaseModel\n\nclass CanceledReason(Enum):\n\nThe reason the search was canceled\n\nwebset_deleted = 'webset_deleted'\n\nwebset_canceled = 'webset_canceled'\n\nclass CreateCriterionParameters(ExaBaseModel):\n\ndescription: constr(min_length=1)\n\nThe description of the criterion\n\nclass CreateEnrichmentParameters(ExaBaseModel):\n\ndescription: constr(min_length=1)\n\nProvide a description of the enrichment task you want to perform to each Webset Item.\n\nformat: Optional[Format] = None\n\nFormat of the enrichment response.\n\nWe automatically select the best format based on the description. If you want to explicitly specify the format, you can do so here.\n\noptions: Optional[List[Option]] = Field(None, max_items=20, min_items=1)\n\nWhen the format is options, the different options for the enrichment agent to choose from.\n\nmetadata: Optional[Dict[str, Any]] = None\n\nSet of key-value pairs you want to associate with this object.\n\nclass CreateWebhookParameters(ExaBaseModel):\n\nevents: List[EventType] = Field(..., max_items=12, min_items=1)\n\nThe events to trigger the webhook\n\nThe URL to send the webhook to\n\nmetadata: Optional[Dict[str, Any]] = None\n\nSet of key-value pairs you want to associate with this object.\n\nclass CreateWebsetParameters(ExaBaseModel):\n\nCreate initial search for the Webset.\n\nenrichments: Optional[List[CreateEnrichmentParameters]] = Field(None, max_items=10)\n\nAdd Enrichments for the Webset.\n\nexternal_id: Optional[str] = Field(None, alias='externalId')\n\nThe external identifier for the webset.\n\nYou can use this to reference the Webset by your own internal identifiers.\n\nmetadata: Optional[Dict[str, Any]] = None\n\nSet of key-value pairs you want to associate with this object.\n\nclass CreateWebsetSearchParameters(ExaBaseModel):\n\ncount: confloat(ge=1.0)\n\nNumber of Items the Search will attempt to find.\n\nThe actual number of Items found may be less than this number depending on the query complexity.\n\nquery: constr(min_length=1) = Field(\n\n'Marketing agencies based in the US, that focus on consumer products. Get brands worked with and city'\n\nQuery describing what you are looking for.\n\nAny URL provided will be crawled and used as context for the search.\n\nWebsetResearchPaperEntity,\n\nEntity the Webset will return results for.\n\nIt is not required to provide it, we automatically detect the entity from all the information provided in the query.\n\ncriteria: Optional[List[CreateCriterionParameters]] = Field(\n\nNone, max_items=5, min_items=1\n\nCriteria every item is evaluated against.\n\nIt's not required to provide your own criteria, we automatically detect the criteria from all the information provided in the query.\n\nbehaviour: Optional[WebsetSearchBehaviour] = Field(\n\n'override', title='WebsetSearchBehaviour'\n\nThe behaviour of the Search when it is added to a Webset.\n\n- `override`: the search will reuse the existing Items found in the Webset and evaluate them against the new criteria. Any Items that don't match the new criteria will be discarded.\n\nmetadata: Optional[Dict[str, Any]] = None\n\nSet of key-value pairs you want to associate with this object.\n\nclass Criterion(ExaBaseModel):\n\ndescription: constr(min_length=1)\n\nThe description of the criterion\n\nsuccess_rate: confloat(ge=0.0, le=100.0) = Field(..., alias='successRate')\n\nValue between 0 and 100 representing the percentage of results that meet the criterion.\n\nclass EnrichmentResult(ExaBaseModel):\n\nobject: Literal['enrichment_result']\n\nformat: WebsetEnrichmentFormat\n\nresult: Optional[List[str]] = None\n\nThe result of the enrichment. None if the enrichment wasn't successful.\n\nreasoning: Optional[str] = None\n\nThe reasoning for the result when an Agent is used.\n\nreferences: List[Reference]\n\nThe references used to generate the result.\n\nenrichment_id: str = Field(..., alias='enrichmentId')\n\nThe id of the Enrichment that generated the result\n\nclass EventType(Enum):\n\nwebset_created = 'webset.created'\n\nwebset_deleted = 'webset.deleted'\n\nwebset_paused = 'webset.paused'\n\nwebset_idle = 'webset.idle'\n\nwebset_search_created = '[webset.search](http://webset.search).created'\n\nwebset_search_canceled = '[webset.search](http://webset.search).canceled'\n\nwebset_search_completed = '[webset.search](http://webset.search).completed'\n\nwebset_search_updated = '[webset.search](http://webset.search).updated'\n\nwebset_export_created = 'webset.export.created'\n\nwebset_export_completed = 'webset.export.completed'\n\nwebset_item_created = 'webset.item.created'\n\nwebset_item_enriched = 'webset.item.enriched'\n\nFormat of the enrichment response.\n\nWe automatically select the best format based on the description. If you want to explicitly specify the format, you can do so here.\n\nclass ListEventsResponse(ExaBaseModel):\n\nWebsetItemCreatedEvent,\n\nWebsetItemEnrichedEvent,\n\nWebsetSearchCreatedEvent,\n\nWebsetSearchUpdatedEvent,\n\nWebsetSearchCanceledEvent,\n\nWebsetSearchCompletedEvent,\n\n] = Field(..., discriminator='type')\n\nhas_more: bool = Field(..., alias='hasMore')\n\nWhether there are more results to paginate through\n\nnext_cursor: Optional[str] = Field(..., alias='nextCursor')\n\nThe cursor to paginate through the next set of results\n\nclass ListWebhookAttemptsResponse(ExaBaseModel):\n\ndata: List[WebhookAttempt]\n\nThe list of webhook attempts\n\nhas_more: bool = Field(..., alias='hasMore')\n\nWhether there are more results to paginate through\n\nnext_cursor: Optional[str] = Field(..., alias='nextCursor')\n\nThe cursor to paginate through the next set of results\n\nclass ListWebhooksResponse(ExaBaseModel):\n\nhas_more: bool = Field(..., alias='hasMore')\n\nWhether there are more results to paginate through\n\nnext_cursor: Optional[str] = Field(..., alias='nextCursor')\n\nThe cursor to paginate through the next set of results\n\nclass ListWebsetItemResponse(ExaBaseModel):\n\ndata: List[WebsetItem]\n\nThe list of webset items\n\nhas_more: bool = Field(..., alias='hasMore')\n\nWhether there are more Items to paginate through\n\nnext_cursor: Optional[str] = Field(..., alias='nextCursor')\n\nThe cursor to paginate through the next set of Items\n\nclass ListWebsetsResponse(ExaBaseModel):\n\nhas_more: bool = Field(..., alias='hasMore')\n\nWhether there are more results to paginate through\n\nnext_cursor: Optional[str] = Field(..., alias='nextCursor')\n\nThe cursor to paginate through the next set of results\n\nclass Option(ExaBaseModel):\n\nThe label of the option\n\nclass Progress(ExaBaseModel):\n\nThe progress of the search\n\nThe number of results found so far\n\ncompletion: confloat(ge=0.0, le=100.0)\n\nThe completion percentage of the search\n\nclass Reference(ExaBaseModel):\n\ntitle: Optional[str] = None\n\nThe title of the reference\n\nsnippet: Optional[str] = None\n\nThe relevant snippet of the reference content\n\nThe URL of the reference\n\nclass Satisfied(Enum):\n\nThe satisfaction of the criterion\n\nclass Search(ExaBaseModel):\n\nCreate initial search for the Webset.\n\nquery: constr(min_length=1) = Field(\n\n'Marketing agencies based in the US, that focus on consumer products.'\n\nUse this to describe what you are looking for.\n\nAny URL provided will be crawled and used as context for the search.\n\ncount: Optional[confloat(ge=1.0)] = 10\n\nNumber of Items the Webset will attempt to find.\n\nThe actual number of Items found may be less than this number depending on the search complexity.\n\nWebsetResearchPaperEntity,\n\n] = Field(None, discriminator='type')\n\nEntity the Webset will return results for.\n\nIt is not required to provide it, we automatically detect the entity from all the information provided in the query. Only use this when you need more fine control.\n\ncriteria: Optional[List[CreateCriterionParameters]] = Field(\n\nNone, max_items=5, min_items=1\n\nCriteria every item is evaluated against.\n\nIt's not required to provide your own criteria, we automatically detect the criteria from all the information provided in the query. Only use this when you need more fine control.\n\nThe source of the Item\n\nclass UpdateWebhookParameters(ExaBaseModel):\n\nevents: Optional[List[EventType]] = Field(None, max_items=12, min_items=1)\n\nThe events to trigger the webhook\n\nurl: Optional[AnyUrl] = None\n\nThe URL to send the webhook to\n\nmetadata: Optional[Dict[str, Any]] = None\n\nSet of key-value pairs you want to associate with this object.\n\nclass UpdateWebsetRequest(ExaBaseModel):\n\nmetadata: Optional[Dict[str, str]] = None\n\nSet of key-value pairs you want to associate with this object.\n\nclass Webhook(ExaBaseModel):\n\nThe unique identifier for the webhook\n\nobject: Literal['webhook']\n\nstatus: WebhookStatus = Field(..., title='WebhookStatus')\n\nThe status of the webhook\n\nevents: List[EventType] = Field(..., min_items=1)\n\nThe events to trigger the webhook\n\nThe URL to send the webhook to\n\nsecret: Optional[str] = None\n\nThe secret to verify the webhook signature. Only returned on Webhook creation.\n\nmetadata: Optional[Dict[str, Any]] = {}\n\nThe metadata of the webhook\n\ncreated_at: datetime = Field(..., alias='createdAt')\n\nThe date and time the webhook was created\n\nupdated_at: datetime = Field(..., alias='updatedAt')\n\nThe date and time the webhook was last updated\n\nclass WebhookAttempt(ExaBaseModel):\n\nThe unique identifier for the webhook attempt\n\nobject: Literal['webhook_attempt']\n\nevent_id: str = Field(..., alias='eventId')\n\nThe unique identifier for the event\n\nevent_type: EventType = Field(..., alias='eventType')\n\nwebhook_id: str = Field(..., alias='webhookId')\n\nThe unique identifier for the webhook\n\nThe URL that was used during the attempt\n\nWhether the attempt was successful\n\nresponse_headers: Dict[str, Any] = Field(..., alias='responseHeaders')\n\nThe headers of the response\n\nresponse_body: str = Field(..., alias='responseBody')\n\nThe body of the response\n\nresponse_status_code: float = Field(..., alias='responseStatusCode')\n\nThe status code of the response\n\nThe attempt number of the webhook\n\nattempted_at: datetime = Field(..., alias='attemptedAt')\n\nThe date and time the webhook attempt was made\n\nclass WebhookStatus(Enum):\n\nThe status of the webhook\n\ninactive = 'inactive'\n\nclass Webset(ExaBaseModel):\n\nThe unique identifier for the webset\n\nobject: Literal['webset']\n\nstatus: WebsetStatus = Field(..., title='WebsetStatus')\n\nThe status of the webset\n\nexternal_id: Optional[str] = Field(..., alias='externalId')\n\nThe external identifier for the webset\n\nsearches: List[WebsetSearch]\n\nThe searches that have been performed on the webset.\n\nenrichments: List[WebsetEnrichment]\n\nThe Enrichments to apply to the Webset Items.\n\nmetadata: Optional[Dict[str, Any]] = {}\n\nSet of key-value pairs you want to associate with this object.\n\ncreated_at: datetime = Field(..., alias='createdAt')\n\nThe date and time the webset was created\n\nupdated_at: datetime = Field(..., alias='updatedAt')\n\nThe date and time the webset was updated\n\nclass WebsetArticleEntity(ExaBaseModel):\n\ntype: Literal['article']\n\nclass WebsetCompanyEntity(ExaBaseModel):\n\ntype: Literal['company']\n\nclass WebsetCreatedEvent(ExaBaseModel):\n\nThe unique identifier for the event\n\nobject: Literal['event']\n\ntype: Literal['webset.created']\n\ncreated_at: datetime = Field(..., alias='createdAt')\n\nThe date and time the event was created\n\nclass WebsetCustomEntity(ExaBaseModel):\n\ntype: Literal['custom']\n\ndescription: constr(min_length=2)\n\nWhen you decide to use a custom entity, this is the description of the entity.\n\nThe entity represents what type of results the Webset will return. For example, if you want results to be Job Postings, you might use \"Job Postings\" as the entity description.\n\nclass WebsetDeletedEvent(ExaBaseModel):\n\nThe unique identifier for the event\n\nobject: Literal['event']\n\ntype: Literal['webset.deleted']\n\ncreated_at: datetime = Field(..., alias='createdAt')\n\nThe date and time the event was created\n\nclass WebsetEnrichment(ExaBaseModel):\n\nThe unique identifier for the enrichment\n\nobject: Literal['webset_enrichment']\n\nstatus: WebsetEnrichmentStatus = Field(..., title='WebsetEnrichmentStatus')\n\nThe status of the enrichment\n\nwebset_id: str = Field(..., alias='websetId')\n\nThe unique identifier for the Webset this enrichment belongs to.\n\ntitle: Optional[str] = None\n\nThe title of the enrichment.\n\nThis will be automatically generated based on the description and format.\n\nThe description of the enrichment task provided during the creation of the enrichment.\n\nformat: Optional[WebsetEnrichmentFormat]\n\nThe format of the enrichment response.\n\noptions: Optional[List[WebsetEnrichmentOption]] = Field(\n\n..., title='WebsetEnrichmentOptions'\n\nWhen the format is options, the different options for the enrichment agent to choose from.\n\ninstructions: Optional[str] = None\n\nThe instructions for the enrichment Agent.\n\nThis will be automatically generated based on the description and format.\n\nmetadata: Optional[Dict[str, Any]] = {}\n\nThe metadata of the enrichment\n\ncreated_at: datetime = Field(..., alias='createdAt')\n\nThe date and time the enrichment was created\n\nupdated_at: datetime = Field(..., alias='updatedAt')\n\nThe date and time the enrichment was updated\n\nclass WebsetEnrichmentFormat(Enum):\n\nclass WebsetEnrichmentOption(Option):\n\nclass WebsetEnrichmentStatus(Enum):\n\nThe status of the enrichment\n\ncanceled = 'canceled'\n\ncompleted = 'completed'\n\nclass WebsetIdleEvent(ExaBaseModel):\n\nThe unique identifier for the event\n\nobject: Literal['event']\n\ntype: Literal['webset.idle']\n\ncreated_at: datetime = Field(..., alias='createdAt')\n\nThe date and time the event was created\n\nclass WebsetItem(ExaBaseModel):\n\nThe unique identifier for the Webset Item\n\nobject: Literal['webset_item']\n\nThe source of the Item\n\nsource_id: str = Field(..., alias='sourceId')\n\nThe unique identifier for the source\n\nwebset_id: str = Field(..., alias='websetId')\n\nThe unique identifier for the Webset this Item belongs to.\n\nWebsetItemPersonProperties,\n\nWebsetItemCompanyProperties,\n\nWebsetItemArticleProperties,\n\nWebsetItemResearchPaperProperties,\n\nWebsetItemCustomProperties,\n\nThe properties of the Item\n\nevaluations: List[WebsetItemEvaluation]\n\nThe criteria evaluations of the item\n\nenrichments: List[EnrichmentResult]\n\nThe enrichments results of the Webset item\n\ncreated_at: datetime = Field(..., alias='createdAt')\n\nThe date and time the item was created\n\nupdated_at: datetime = Field(..., alias='updatedAt')\n\nThe date and time the item was last updated\n\nclass WebsetItemArticleProperties(ExaBaseModel):\n\ntype: Literal['article']\n\nThe URL of the article\n\nShort description of the relevance of the article\n\ncontent: Optional[str] = None\n\nThe text content for the article\n\narticle: WebsetItemArticlePropertiesFields = Field(\n\n..., title='WebsetItemArticlePropertiesFields'\n\nclass WebsetItemArticlePropertiesFields(ExaBaseModel):\n\nauthor: Optional[str] = None\n\nThe author(s) of the article\n\npublished_at: Optional[str] = Field(..., alias='publishedAt')\n\nThe date and time the article was published\n\nclass WebsetItemCompanyProperties(ExaBaseModel):\n\ntype: Literal['company']\n\nThe URL of the company website\n\nShort description of the relevance of the company\n\ncontent: Optional[str] = None\n\nThe text content of the company website\n\ncompany: WebsetItemCompanyPropertiesFields = Field(\n\n..., title='WebsetItemCompanyPropertiesFields'\n\nclass WebsetItemCompanyPropertiesFields(ExaBaseModel):\n\nThe name of the company\n\nlocation: Optional[str] = None\n\nThe main location of the company\n\nemployees: Optional[float] = None\n\nThe number of employees of the company\n\nindustry: Optional[str] = None\n\nThe industry of the company\n\nabout: Optional[str] = None\n\nA short description of the company\n\nlogo_url: Optional[AnyUrl] = Field(..., alias='logoUrl')\n\nThe logo URL of the company\n\nclass WebsetItemCreatedEvent(ExaBaseModel):\n\nThe unique identifier for the event\n\nobject: Literal['event']\n\ntype: Literal['webset.item.created']\n\ncreated_at: datetime = Field(..., alias='createdAt')\n\nThe date and time the event was created\n\nclass WebsetItemCustomProperties(ExaBaseModel):\n\ntype: Literal['custom']\n\nShort description of the Item\n\ncontent: Optional[str] = None\n\nThe text content of the Item\n\ncustom: WebsetItemCustomPropertiesFields = Field(\n\n..., title='WebsetItemCustomPropertiesFields'\n\nclass WebsetItemCustomPropertiesFields(ExaBaseModel):\n\nauthor: Optional[str] = None\n\nThe author(s) of the website\n\npublished_at: Optional[str] = Field(..., alias='publishedAt')\n\nThe date and time the website was published\n\nclass WebsetItemEnrichedEvent(ExaBaseModel):\n\nThe unique identifier for the event\n\nobject: Literal['event']\n\ntype: Literal['webset.item.enriched']\n\ncreated_at: datetime = Field(..., alias='createdAt')\n\nThe date and time the event was created\n\nclass WebsetItemEvaluation(ExaBaseModel):\n\nThe description of the criterion\n\nThe reasoning for the result of the evaluation\n\nThe satisfaction of the criterion\n\nreferences: List[Reference] = []\n\nThe references used to generate the result. `null` if the evaluation is not yet completed.\n\nclass WebsetItemPersonProperties(ExaBaseModel):\n\ntype: Literal['person']\n\nThe URL of the person profile\n\nShort description of the relevance of the person\n\nperson: WebsetItemPersonPropertiesFields = Field(\n\n..., title='WebsetItemPersonPropertiesFields'\n\nclass WebsetItemPersonPropertiesFields(ExaBaseModel):\n\nThe name of the person\n\nlocation: Optional[str] = None\n\nThe location of the person\n\nposition: Optional[str] = None\n\nThe current work position of the person\n\npicture_url: Optional[AnyUrl] = Field(..., alias='pictureUrl')\n\nThe image URL of the person\n\nclass WebsetItemResearchPaperProperties(ExaBaseModel):\n\ntype: Literal['research_paper']\n\nThe URL of the research paper\n\nShort description of the relevance of the research paper\n\ncontent: Optional[str] = None\n\nThe text content of the research paper\n\nresearch_paper: WebsetItemResearchPaperPropertiesFields = Field(\n\n..., alias='researchPaper', title='WebsetItemResearchPaperPropertiesFields'\n\nclass WebsetItemResearchPaperPropertiesFields(ExaBaseModel):\n\nauthor: Optional[str] = None\n\nThe author(s) of the research paper\n\npublished_at: Optional[str] = Field(..., alias='publishedAt')\n\nThe date and time the research paper was published\n\nclass WebsetPausedEvent(ExaBaseModel):\n\nThe unique identifier for the event\n\nobject: Literal['event']\n\ntype: Literal['webset.paused']\n\ncreated_at: datetime = Field(..., alias='createdAt')\n\nThe date and time the event was created\n\nclass WebsetPersonEntity(ExaBaseModel):\n\ntype: Literal['person']\n\nclass WebsetResearchPaperEntity(ExaBaseModel):\n\ntype: Literal['research_paper']\n\nclass WebsetSearch(ExaBaseModel):\n\nThe unique identifier for the search\n\nobject: Literal['webset_search']\n\nstatus: WebsetSearchStatus = Field(..., title='WebsetSearchStatus')\n\nThe status of the search\n\nquery: constr(min_length=1)\n\nThe query used to create the search.\n\nWebsetResearchPaperEntity,\n\nThe entity the search will return results for.\n\nWhen no entity is provided during creation, we will automatically select the best entity based on the query.\n\ncriteria: List[Criterion]\n\nThe criteria the search will use to evaluate the results. If not provided, we will automatically generate them for you.\n\ncount: confloat(ge=1.0)\n\nThe number of results the search will attempt to find. The actual number of results may be less than this number depending on the search complexity.\n\nThe progress of the search\n\nmetadata: Optional[Dict[str, Any]] = {}\n\nSet of key-value pairs you want to associate with this object.\n\ncanceled_at: Optional[datetime] = Field(..., alias='canceledAt')\n\nThe date and time the search was canceled\n\ncanceled_reason: Optional[CanceledReason] = Field(..., alias='canceledReason')\n\nThe reason the search was canceled\n\ncreated_at: datetime = Field(..., alias='createdAt')\n\nThe date and time the search was created\n\nupdated_at: datetime = Field(..., alias='updatedAt')\n\nThe date and time the search was updated\n\nclass WebsetSearchBehaviour(Enum):\n\nThe behaviour of the Search when it is added to a Webset.\n\n- `override`: the search will reuse the existing Items found in the Webset and evaluate them against the new criteria. Any Items that don't match the new criteria will be discarded.\n\noverride = 'override'\n\nclass WebsetSearchCanceledEvent(ExaBaseModel):\n\nThe unique identifier for the event\n\nobject: Literal['event']\n\ntype: Literal['[webset.search](http://webset.search).canceled']\n\ncreated_at: datetime = Field(..., alias='createdAt')\n\nThe date and time the event was created\n\nclass WebsetSearchCompletedEvent(ExaBaseModel):\n\nThe unique identifier for the event\n\nobject: Literal['event']\n\ntype: Literal['[webset.search](http://webset.search).completed']\n\ncreated_at: datetime = Field(..., alias='createdAt')\n\nThe date and time the event was created\n\nclass WebsetSearchCreatedEvent(ExaBaseModel):\n\nThe unique identifier for the event\n\nobject: Literal['event']\n\ntype: Literal['[webset.search](http://webset.search).created']\n\ncreated_at: datetime = Field(..., alias='createdAt')\n\nThe date and time the event was created\n\nclass WebsetSearchStatus(Enum):\n\nThe status of the search\n\ncompleted = 'completed'\n\ncanceled = 'canceled'\n\nclass WebsetSearchUpdatedEvent(ExaBaseModel):\n\nThe unique identifier for the event\n\nobject: Literal['event']\n\ntype: Literal['[webset.search](http://webset.search).updated']\n\ncreated_at: datetime = Field(..., alias='createdAt')\n\nThe date and time the event was created\n\nclass WebsetStatus(Enum):\n\nThe status of the webset\n\nclass GetWebsetResponse(Webset):\n\nitems: Optional[List[WebsetItem]] = None\n\nWhen expand query parameter contains `items`, this will contain the items in the webset\n\nThe following text is a Git repository with code. The structure of the text are sections that begin with ----, followed by a single line containing the file path and file name, followed by a variable amount of lines containing the file contents. The text representing the Git repository ends when the symbols --END-- are encounted. Any further text beyond --END-- are meant to be interpreted as instructions using the aforementioned Git repository as context.\n\n[client.py](http://client.py)\n\nfrom **future** import annotations\n\nfrom datetime import datetime\n\nfrom typing import List, Optional, Literal, Dict, Any, Union\n\nCreateWebsetParameters,\n\nfrom .core.base import WebsetsBaseClient\n\nfrom .items import WebsetItemsClient\n\nfrom .searches import WebsetSearchesClient\n\nfrom .enrichments import WebsetEnrichmentsClient\n\nfrom .webhooks import WebsetWebhooksClient\n\nclass WebsetsClient(WebsetsBaseClient):\n\n\"\"\"Client for managing Websets.\"\"\"\n\ndef **init**(self, client):\n\nsuper().\\__init_\\_(client)\n\nself.items = WebsetItemsClient(client)\n\nself.searches = WebsetSearchesClient(client)\n\nself.enrichments = WebsetEnrichmentsClient(client)\n\nself.webhooks = WebsetWebhooksClient(client)\n\ndef create(self, params: Union[Dict[str, Any], CreateWebsetParameters]) -\\> Webset:\n\n\"\"\"Create a new Webset.\n\nparams (CreateWebsetParameters): The parameters for creating a webset.\n\nWebset: The created webset.\n\nresponse = self.request(\"/v0/websets\", data=params)\n\nreturn Webset.model_validate(response)\n\ndef get(self, id: str, \\*, expand: Optional[List[Literal[\"items\"]]] = None) -\\> GetWebsetResponse:\n\n\"\"\"Get a Webset by ID.\n\nid (str): The id or externalId of the Webset.\n\nexpand (List[Literal[\"items\"]], optional): Expand the response with specified resources.\n\nAllowed values: [\"items\"]\n\nGetWebsetResponse: The retrieved webset.\n\nparams = {\"expand\": expand} if expand else {}\n\nresponse = self.request(f\"/v0/websets/{id}\", params=params, method=\"GET\")\n\nreturn GetWebsetResponse.model_validate(response)\n\ndef list(self, \\*, cursor: Optional[str] = None, limit: Optional[int] = None) -\\> ListWebsetsResponse:\n\ncursor (str, optional): The cursor to paginate through the results.\n\nlimit (int, optional): The number of results to return (max 200).\n\nListWebsetsResponse: List of websets.\n\nparams = {k: v for k, v in {\"cursor\": cursor, \"limit\": limit}.items() if v is not None}\n\nresponse = self.request(\"/v0/websets\", params=params, method=\"GET\")\n\nreturn ListWebsetsResponse.model_validate(response)\n\ndef update(self, id: str, params: Union[Dict[str, Any], UpdateWebsetRequest]) -\\> Webset:\n\nid (str): The id or externalId of the Webset.\n\nparams (UpdateWebsetRequest): The parameters for updating a webset.\n\nWebset: The updated webset.\n\nresponse = self.request(f\"/v0/websets/{id}\", data=params, method=\"POST\")\n\nreturn Webset.model_validate(response)\n\ndef delete(self, id: str) -\\> Webset:\n\nid (str): The id or externalId of the Webset.\n\nWebset: The deleted webset.\n\nresponse = self.request(f\"/v0/websets/{id}\", method=\"DELETE\")\n\nreturn Webset.model_validate(response)\n\ndef cancel(self, id: str) -\\> Webset:\n\n\"\"\"Cancel a running Webset.\n\nid (str): The id or externalId of the Webset.\n\nWebset: The canceled webset.\n\nresponse = self.request(f\"/v0/websets/{id}/cancel\", method=\"POST\")\n\nreturn Webset.model_validate(response)\n\ndef wait_until_idle(self, id: str, \\*, timeout: int = 3600, poll_interval: int = 5) -\\> Webset:\n\n\"\"\"Wait until a Webset is idle.\n\nid (str): The id or externalId of the Webset.\n\ntimeout (int, optional): Maximum time to wait in seconds. Defaults to 3600.\n\npoll_interval (int, optional): Time to wait between polls in seconds. Defaults to 5.\n\nWebset: The webset once it's idle.\n\nTimeoutError: If the webset does not become idle within the timeout period.\n\nstart_time = time.time()\n\nwebset = self.get(id)\n\nif webset.status == WebsetStatus.idle.value:\n\nif time.time() - start_time \\> timeout:\n\nraise TimeoutError(f\"Webset {id} did not become idle within {timeout} seconds\")\n\ntime.sleep(poll_interval)\n\nfrom .client import WebsetsClient\n\n[types.py](http://types.py)\n\nfrom **future** import annotations\n\nfrom datetime import datetime\n\nfrom enum import Enum\n\nfrom typing import Any, Dict, List, Literal, Optional, Union\n\nfrom pydantic import AnyUrl, Field, confloat, constr\n\nfrom .core.base import ExaBaseModel\n\nclass CanceledReason(Enum):\n\nThe reason the search was canceled\n\nwebset_deleted = 'webset_deleted'\n\nwebset_canceled = 'webset_canceled'\n\nclass CreateCriterionParameters(ExaBaseModel):\n\ndescription: constr(min_length=1)\n\nThe description of the criterion\n\nclass CreateEnrichmentParameters(ExaBaseModel):\n\ndescription: constr(min_length=1)\n\nProvide a description of the enrichment task you want to perform to each Webset Item.\n\nformat: Optional[Format] = None\n\nFormat of the enrichment response.\n\nWe automatically select the best format based on the description. If you want to explicitly specify the format, you can do so here.\n\noptions: Optional[List[Option]] = Field(None, max_items=20, min_items=1)\n\nWhen the format is options, the different options for the enrichment agent to choose from.\n\nmetadata: Optional[Dict[str, Any]] = None\n\nSet of key-value pairs you want to associate with this object.\n\nclass CreateWebhookParameters(ExaBaseModel):\n\nevents: List[EventType] = Field(..., max_items=12, min_items=1)\n\nThe events to trigger the webhook\n\nThe URL to send the webhook to\n\nmetadata: Optional[Dict[str, Any]] = None\n\nSet of key-value pairs you want to associate with this object.\n\nclass CreateWebsetParameters(ExaBaseModel):\n\nCreate initial search for the Webset.\n\nenrichments: Optional[List[CreateEnrichmentParameters]] = Field(None, max_items=10)\n\nAdd Enrichments for the Webset.\n\nexternal_id: Optional[str] = Field(None, alias='externalId')\n\nThe external identifier for the webset.\n\nYou can use this to reference the Webset by your own internal identifiers.\n\nmetadata: Optional[Dict[str, Any]] = None\n\nSet of key-value pairs you want to associate with this object.\n\nclass CreateWebsetSearchParameters(ExaBaseModel):\n\ncount: confloat(ge=1.0)\n\nNumber of Items the Search will attempt to find.\n\nThe actual number of Items found may be less than this number depending on the query complexity.\n\nquery: constr(min_length=1) = Field(\n\n'Marketing agencies based in the US, that focus on consumer products. Get brands worked with and city'\n\nQuery describing what you are looking for.\n\nAny URL provided will be crawled and used as context for the search.\n\nWebsetResearchPaperEntity,\n\nEntity the Webset will return results for.\n\nIt is not required to provide it, we automatically detect the entity from all the information provided in the query.\n\ncriteria: Optional[List[CreateCriterionParameters]] = Field(\n\nNone, max_items=5, min_items=1\n\nCriteria every item is evaluated against.\n\nIt's not required to provide your own criteria, we automatically detect the criteria from all the information provided in the query.\n\nbehaviour: Optional[WebsetSearchBehaviour] = Field(\n\n'override', title='WebsetSearchBehaviour'\n\nThe behaviour of the Search when it is added to a Webset.\n\n- `override`: the search will reuse the existing Items found in the Webset and evaluate them against the new criteria. Any Items that don't match the new criteria will be discarded.\n\nmetadata: Optional[Dict[str, Any]] = None\n\nSet of key-value pairs you want to associate with this object.\n\nclass Criterion(ExaBaseModel):\n\ndescription: constr(min_length=1)\n\nThe description of the criterion\n\nsuccess_rate: confloat(ge=0.0, le=100.0) = Field(..., alias='successRate')\n\nValue between 0 and 100 representing the percentage of results that meet the criterion.\n\nclass EnrichmentResult(ExaBaseModel):\n\nobject: Literal['enrichment_result']\n\nformat: WebsetEnrichmentFormat\n\nresult: Optional[List[str]] = None\n\nThe result of the enrichment. None if the enrichment wasn't successful.\n\nreasoning: Optional[str] = None\n\nThe reasoning for the result when an Agent is used.\n\nreferences: List[Reference]\n\nThe references used to generate the result.\n\nenrichment_id: str = Field(..., alias='enrichmentId')\n\nThe id of the Enrichment that generated the result\n\nclass EventType(Enum):\n\nwebset_created = 'webset.created'\n\nwebset_deleted = 'webset.deleted'\n\nwebset_paused = 'webset.paused'\n\nwebset_idle = 'webset.idle'\n\nwebset_search_created = '[webset.search](http://webset.search).created'\n\nwebset_search_canceled = '[webset.search](http://webset.search).canceled'\n\nwebset_search_completed = '[webset.search](http://webset.search).completed'\n\nwebset_search_updated = '[webset.search](http://webset.search).updated'\n\nwebset_export_created = 'webset.export.created'\n\nwebset_export_completed = 'webset.export.completed'\n\nwebset_item_created = 'webset.item.created'\n\nwebset_item_enriched = 'webset.item.enriched'\n\nFormat of the enrichment response.\n\nWe automatically select the best format based on the description. If you want to explicitly specify the format, you can do so here.\n\nclass ListEventsResponse(ExaBaseModel):\n\nWebsetItemCreatedEvent,\n\nWebsetItemEnrichedEvent,\n\nWebsetSearchCreatedEvent,\n\nWebsetSearchUpdatedEvent,\n\nWebsetSearchCanceledEvent,\n\nWebsetSearchCompletedEvent,\n\n] = Field(..., discriminator='type')\n\nhas_more: bool = Field(..., alias='hasMore')\n\nWhether there are more results to paginate through\n\nnext_cursor: Optional[str] = Field(..., alias='nextCursor')\n\nThe cursor to paginate through the next set of results\n\nclass ListWebhookAttemptsResponse(ExaBaseModel):\n\ndata: List[WebhookAttempt]\n\nThe list of webhook attempts\n\nhas_more: bool = Field(..., alias='hasMore')\n\nWhether there are more results to paginate through\n\nnext_cursor: Optional[str] = Field(..., alias='nextCursor')\n\nThe cursor to paginate through the next set of results\n\nclass ListWebhooksResponse(ExaBaseModel):\n\nhas_more: bool = Field(..., alias='hasMore')\n\nWhether there are more results to paginate through\n\nnext_cursor: Optional[str] = Field(..., alias='nextCursor')\n\nThe cursor to paginate through the next set of results\n\nclass ListWebsetItemResponse(ExaBaseModel):\n\ndata: List[WebsetItem]\n\nThe list of webset items\n\nhas_more: bool = Field(..., alias='hasMore')\n\nWhether there are more Items to paginate through\n\nnext_cursor: Optional[str] = Field(..., alias='nextCursor')\n\nThe cursor to paginate through the next set of Items\n\nclass ListWebsetsResponse(ExaBaseModel):\n\nhas_more: bool = Field(..., alias='hasMore')\n\nWhether there are more results to paginate through\n\nnext_cursor: Optional[str] = Field(..., alias='nextCursor')\n\nThe cursor to paginate through the next set of results\n\nclass Option(ExaBaseModel):\n\nThe label of the option\n\nclass Progress(ExaBaseModel):\n\nThe progress of the search\n\nThe number of results found so far\n\ncompletion: confloat(ge=0.0, le=100.0)\n\nThe completion percentage of the search\n\nclass Reference(ExaBaseModel):\n\ntitle: Optional[str] = None\n\nThe title of the reference\n\nsnippet: Optional[str] = None\n\nThe relevant snippet of the reference content\n\nThe URL of the reference\n\nclass Satisfied(Enum):\n\nThe satisfaction of the criterion\n\nclass Search(ExaBaseModel):\n\nCreate initial search for the Webset.\n\nquery: constr(min_length=1) = Field(\n\n'Marketing agencies based in the US, that focus on consumer products.'\n\nUse this to describe what you are looking for.\n\nAny URL provided will be crawled and used as context for the search.\n\ncount: Optional[confloat(ge=1.0)] = 10\n\nNumber of Items the Webset will attempt to find.\n\nThe actual number of Items found may be less than this number depending on the search complexity.\n\nWebsetResearchPaperEntity,\n\n] = Field(None, discriminator='type')\n\nEntity the Webset will return results for.\n\nIt is not required to provide it, we automatically detect the entity from all the information provided in the query. Only use this when you need more fine control.\n\ncriteria: Optional[List[CreateCriterionParameters]] = Field(\n\nNone, max_items=5, min_items=1\n\nCriteria every item is evaluated against.\n\nIt's not required to provide your own criteria, we automatically detect the criteria from all the information provided in the query. Only use this when you need more fine control.\n\nThe source of the Item\n\nclass UpdateWebhookParameters(ExaBaseModel):\n\nevents: Optional[List[EventType]] = Field(None, max_items=12, min_items=1)\n\nThe events to trigger the webhook\n\nurl: Optional[AnyUrl] = None\n\nThe URL to send the webhook to\n\nmetadata: Optional[Dict[str, Any]] = None\n\nSet of key-value pairs you want to associate with this object.\n\nclass UpdateWebsetRequest(ExaBaseModel):\n\nmetadata: Optional[Dict[str, str]] = None\n\nSet of key-value pairs you want to associate with this object.\n\nclass Webhook(ExaBaseModel):\n\nThe unique identifier for the webhook\n\nobject: Literal['webhook']\n\nstatus: WebhookStatus = Field(..., title='WebhookStatus')\n\nThe status of the webhook\n\nevents: List[EventType] = Field(..., min_items=1)\n\nThe events to trigger the webhook\n\nThe URL to send the webhook to\n\nsecret: Optional[str] = None\n\nThe secret to verify the webhook signature. Only returned on Webhook creation.\n\nmetadata: Optional[Dict[str, Any]] = {}\n\nThe metadata of the webhook\n\ncreated_at: datetime = Field(..., alias='createdAt')\n\nThe date and time the webhook was created\n\nupdated_at: datetime = Field(..., alias='updatedAt')\n\nThe date and time the webhook was last updated\n\nclass WebhookAttempt(ExaBaseModel):\n\nThe unique identifier for the webhook attempt\n\nobject: Literal['webhook_attempt']\n\nevent_id: str = Field(..., alias='eventId')\n\nThe unique identifier for the event\n\nevent_type: EventType = Field(..., alias='eventType')\n\nwebhook_id: str = Field(..., alias='webhookId')\n\nThe unique identifier for the webhook\n\nThe URL that was used during the attempt\n\nWhether the attempt was successful\n\nresponse_headers: Dict[str, Any] = Field(..., alias='responseHeaders')\n\nThe headers of the response\n\nresponse_body: str = Field(..., alias='responseBody')\n\nThe body of the response\n\nresponse_status_code: float = Field(..., alias='responseStatusCode')\n\nThe status code of the response\n\nThe attempt number of the webhook\n\nattempted_at: datetime = Field(..., alias='attemptedAt')\n\nThe date and time the webhook attempt was made\n\nclass WebhookStatus(Enum):\n\nThe status of the webhook\n\ninactive = 'inactive'\n\nclass Webset(ExaBaseModel):\n\nThe unique identifier for the webset\n\nobject: Literal['webset']\n\nstatus: WebsetStatus = Field(..., title='WebsetStatus')\n\nThe status of the webset\n\nexternal_id: Optional[str] = Field(..., alias='externalId')\n\nThe external identifier for the webset\n\nsearches: List[WebsetSearch]\n\nThe searches that have been performed on the webset.\n\nenrichments: List[WebsetEnrichment]\n\nThe Enrichments to apply to the Webset Items.\n\nmetadata: Optional[Dict[str, Any]] = {}\n\nSet of key-value pairs you want to associate with this object.\n\ncreated_at: datetime = Field(..., alias='createdAt')\n\nThe date and time the webset was created\n\nupdated_at: datetime = Field(..., alias='updatedAt')\n\nThe date and time the webset was updated\n\nclass WebsetArticleEntity(ExaBaseModel):\n\ntype: Literal['article']\n\nclass WebsetCompanyEntity(ExaBaseModel):\n\ntype: Literal['company']\n\nclass WebsetCreatedEvent(ExaBaseModel):\n\nThe unique identifier for the event\n\nobject: Literal['event']\n\ntype: Literal['webset.created']\n\ncreated_at: datetime = Field(..., alias='createdAt')\n\nThe date and time the event was created\n\nclass WebsetCustomEntity(ExaBaseModel):\n\ntype: Literal['custom']\n\ndescription: constr(min_length=2)\n\nWhen you decide to use a custom entity, this is the description of the entity.\n\nThe entity represents what type of results the Webset will return. For example, if you want results to be Job Postings, you might use \"Job Postings\" as the entity description.\n\nclass WebsetDeletedEvent(ExaBaseModel):\n\nThe unique identifier for the event\n\nobject: Literal['event']\n\ntype: Literal['webset.deleted']\n\ncreated_at: datetime = Field(..., alias='createdAt')\n\nThe date and time the event was created\n\nclass WebsetEnrichment(ExaBaseModel):\n\nThe unique identifier for the enrichment\n\nobject: Literal['webset_enrichment']\n\nstatus: WebsetEnrichmentStatus = Field(..., title='WebsetEnrichmentStatus')\n\nThe status of the enrichment\n\nwebset_id: str = Field(..., alias='websetId')\n\nThe unique identifier for the Webset this enrichment belongs to.\n\ntitle: Optional[str] = None\n\nThe title of the enrichment.\n\nThis will be automatically generated based on the description and format.\n\nThe description of the enrichment task provided during the creation of the enrichment.\n\nformat: Optional[WebsetEnrichmentFormat]\n\nThe format of the enrichment response.\n\noptions: Optional[List[WebsetEnrichmentOption]] = Field(\n\n..., title='WebsetEnrichmentOptions'\n\nWhen the format is options, the different options for the enrichment agent to choose from.\n\ninstructions: Optional[str] = None\n\nThe instructions for the enrichment Agent.\n\nThis will be automatically generated based on the description and format.\n\nmetadata: Optional[Dict[str, Any]] = {}\n\nThe metadata of the enrichment\n\ncreated_at: datetime = Field(..., alias='createdAt')\n\nThe date and time the enrichment was created\n\nupdated_at: datetime = Field(..., alias='updatedAt')\n\nThe date and time the enrichment was updated\n\nclass WebsetEnrichmentFormat(Enum):\n\nclass WebsetEnrichmentOption(Option):\n\nclass WebsetEnrichmentStatus(Enum):\n\nThe status of the enrichment\n\ncanceled = 'canceled'\n\ncompleted = 'completed'\n\nclass WebsetIdleEvent(ExaBaseModel):\n\nThe unique identifier for the event\n\nobject: Literal['event']\n\ntype: Literal['webset.idle']\n\ncreated_at: datetime = Field(..., alias='createdAt')\n\nThe date and time the event was created\n\nclass WebsetItem(ExaBaseModel):\n\nThe unique identifier for the Webset Item\n\nobject: Literal['webset_item']\n\nThe source of the Item\n\nsource_id: str = Field(..., alias='sourceId')\n\nThe unique identifier for the source\n\nwebset_id: str = Field(..., alias='websetId')\n\nThe unique identifier for the Webset this Item belongs to.\n\nWebsetItemPersonProperties,\n\nWebsetItemCompanyProperties,\n\nWebsetItemArticleProperties,\n\nWebsetItemResearchPaperProperties,\n\nWebsetItemCustomProperties,\n\nThe properties of the Item\n\nevaluations: List[WebsetItemEvaluation]\n\nThe criteria evaluations of the item\n\nenrichments: List[EnrichmentResult]\n\nThe enrichments results of the Webset item\n\ncreated_at: datetime = Field(..., alias='createdAt')\n\nThe date and time the item was created\n\nupdated_at: datetime = Field(..., alias='updatedAt')\n\nThe date and time the item was last updated\n\nclass WebsetItemArticleProperties(ExaBaseModel):\n\ntype: Literal['article']\n\nThe URL of the article\n\nShort description of the relevance of the article\n\ncontent: Optional[str] = None\n\nThe text content for the article\n\narticle: WebsetItemArticlePropertiesFields = Field(\n\n..., title='WebsetItemArticlePropertiesFields'\n\nclass WebsetItemArticlePropertiesFields(ExaBaseModel):\n\nauthor: Optional[str] = None\n\nThe author(s) of the article\n\npublished_at: Optional[str] = Field(..., alias='publishedAt')\n\nThe date and time the article was published\n\nclass WebsetItemCompanyProperties(ExaBaseModel):\n\ntype: Literal['company']\n\nThe URL of the company website\n\nShort description of the relevance of the company\n\ncontent: Optional[str] = None\n\nThe text content of the company website\n\ncompany: WebsetItemCompanyPropertiesFields = Field(\n\n..., title='WebsetItemCompanyPropertiesFields'\n\nclass WebsetItemCompanyPropertiesFields(ExaBaseModel):\n\nThe name of the company\n\nlocation: Optional[str] = None\n\nThe main location of the company\n\nemployees: Optional[float] = None\n\nThe number of employees of the company\n\nindustry: Optional[str] = None\n\nThe industry of the company\n\nabout: Optional[str] = None\n\nA short description of the company\n\nlogo_url: Optional[AnyUrl] = Field(..., alias='logoUrl')\n\nThe logo URL of the company\n\nclass WebsetItemCreatedEvent(ExaBaseModel):\n\nThe unique identifier for the event\n\nobject: Literal['event']\n\ntype: Literal['webset.item.created']\n\ncreated_at: datetime = Field(..., alias='createdAt')\n\nThe date and time the event was created\n\nclass WebsetItemCustomProperties(ExaBaseModel):\n\ntype: Literal['custom']\n\nShort description of the Item\n\ncontent: Optional[str] = None\n\nThe text content of the Item\n\ncustom: WebsetItemCustomPropertiesFields = Field(\n\n..., title='WebsetItemCustomPropertiesFields'\n\nclass WebsetItemCustomPropertiesFields(ExaBaseModel):\n\nauthor: Optional[str] = None\n\nThe author(s) of the website\n\npublished_at: Optional[str] = Field(..., alias='publishedAt')\n\nThe date and time the website was published\n\nclass WebsetItemEnrichedEvent(ExaBaseModel):\n\nThe unique identifier for the event\n\nobject: Literal['event']\n\ntype: Literal['webset.item.enriched']\n\ncreated_at: datetime = Field(..., alias='createdAt')\n\nThe date and time the event was created\n\nclass WebsetItemEvaluation(ExaBaseModel):\n\nThe description of the criterion\n\nThe reasoning for the result of the evaluation\n\nThe satisfaction of the criterion\n\nreferences: List[Reference] = []\n\nThe references used to generate the result. `null` if the evaluation is not yet completed.\n\nclass WebsetItemPersonProperties(ExaBaseModel):\n\ntype: Literal['person']\n\nThe URL of the person profile\n\nShort description of the relevance of the person\n\nperson: WebsetItemPersonPropertiesFields = Field(\n\n..., title='WebsetItemPersonPropertiesFields'\n\nclass WebsetItemPersonPropertiesFields(ExaBaseModel):\n\nThe name of the person\n\nlocation: Optional[str] = None\n\nThe location of the person\n\nposition: Optional[str] = None\n\nThe current work position of the person\n\npicture_url: Optional[AnyUrl] = Field(..., alias='pictureUrl')\n\nThe image URL of the person\n\nclass WebsetItemResearchPaperProperties(ExaBaseModel):\n\ntype: Literal['research_paper']\n\nThe URL of the research paper\n\nShort description of the relevance of the research paper\n\ncontent: Optional[str] = None\n\nThe text content of the research paper\n\nresearch_paper: WebsetItemResearchPaperPropertiesFields = Field(\n\n..., alias='researchPaper', title='WebsetItemResearchPaperPropertiesFields'\n\nclass WebsetItemResearchPaperPropertiesFields(ExaBaseModel):\n\nauthor: Optional[str] = None\n\nThe author(s) of the research paper\n\npublished_at: Optional[str] = Field(..., alias='publishedAt')\n\nThe date and time the research paper was published\n\nclass WebsetPausedEvent(ExaBaseModel):\n\nThe unique identifier for the event\n\nobject: Literal['event']\n\ntype: Literal['webset.paused']\n\ncreated_at: datetime = Field(..., alias='createdAt')\n\nThe date and time the event was created\n\nclass WebsetPersonEntity(ExaBaseModel):\n\ntype: Literal['person']\n\nclass WebsetResearchPaperEntity(ExaBaseModel):\n\ntype: Literal['research_paper']\n\nclass WebsetSearch(ExaBaseModel):\n\nThe unique identifier for the search\n\nobject: Literal['webset_search']\n\nstatus: WebsetSearchStatus = Field(..., title='WebsetSearchStatus')\n\nThe status of the search\n\nquery: constr(min_length=1)\n\nThe query used to create the search.\n\nWebsetResearchPaperEntity,\n\nThe entity the search will return results for.\n\nWhen no entity is provided during creation, we will automatically select the best entity based on the query.\n\ncriteria: List[Criterion]\n\nThe criteria the search will use to evaluate the results. If not provided, we will automatically generate them for you.\n\ncount: confloat(ge=1.0)\n\nThe number of results the search will attempt to find. The actual number of results may be less than this number depending on the search complexity.\n\nThe progress of the search\n\nmetadata: Optional[Dict[str, Any]] = {}\n\nSet of key-value pairs you want to associate with this object.\n\ncanceled_at: Optional[datetime] = Field(..., alias='canceledAt')\n\nThe date and time the search was canceled\n\ncanceled_reason: Optional[CanceledReason] = Field(..., alias='canceledReason')\n\nThe reason the search was canceled\n\ncreated_at: datetime = Field(..., alias='createdAt')\n\nThe date and time the search was created\n\nupdated_at: datetime = Field(..., alias='updatedAt')\n\nThe date and time the search was updated\n\nclass WebsetSearchBehaviour(Enum):\n\nThe behaviour of the Search when it is added to a Webset.\n\n- `override`: the search will reuse the existing Items found in the Webset and evaluate them against the new criteria. Any Items that don't match the new criteria will be discarded.\n\noverride = 'override'\n\nclass WebsetSearchCanceledEvent(ExaBaseModel):\n\nThe unique identifier for the event\n\nobject: Literal['event']\n\ntype: Literal['[webset.search](http://webset.search).canceled']\n\ncreated_at: datetime = Field(..., alias='createdAt')\n\nThe date and time the event was created\n\nclass WebsetSearchCompletedEvent(ExaBaseModel):\n\nThe unique identifier for the event\n\nobject: Literal['event']\n\ntype: Literal['[webset.search](http://webset.search).completed']\n\ncreated_at: datetime = Field(..., alias='createdAt')\n\nThe date and time the event was created\n\nclass WebsetSearchCreatedEvent(ExaBaseModel):\n\nThe unique identifier for the event\n\nobject: Literal['event']\n\ntype: Literal['[webset.search](http://webset.search).created']\n\ncreated_at: datetime = Field(..., alias='createdAt')\n\nThe date and time the event was created\n\nclass WebsetSearchStatus(Enum):\n\nThe status of the search\n\ncompleted = 'completed'\n\ncanceled = 'canceled'\n\nclass WebsetSearchUpdatedEvent(ExaBaseModel):\n\nThe unique identifier for the event\n\nobject: Literal['event']\n\ntype: Literal['[webset.search](http://webset.search).updated']\n\ncreated_at: datetime = Field(..., alias='createdAt')\n\nThe date and time the event was created\n\nclass WebsetStatus(Enum):\n\nThe status of the webset\n\nclass GetWebsetResponse(Webset):\n\nitems: Optional[List[WebsetItem]] = None\n\nWhen expand query parameter contains `items`, this will contain the items in the webset\n\nsearches/[client.py](http://client.py)\n\nfrom **future** import annotations\n\nfrom typing import Dict, Any, Union\n\nfrom ..types import (\n\nCreateWebsetSearchParameters,\n\nfrom ..core.base import WebsetsBaseClient\n\nclass WebsetSearchesClient(WebsetsBaseClient):\n\n\"\"\"Client for managing Webset Searches.\"\"\"\n\ndef **init**(self, client):\n\nsuper().\\__init_\\_(client)\n\ndef create(self, webset_id: str, params: Union[Dict[str, Any], CreateWebsetSearchParameters]) -\\> WebsetSearch:\n\n\"\"\"Create a new Search for the Webset.\n\nwebset_id (str): The id of the Webset.\n\nparams (CreateWebsetSearchParameters): The parameters for creating a search.\n\nWebsetSearch: The created search.\n\nresponse = self.request(f\"/v0/websets/{webset_id}/searches\", data=params)\n\nreturn WebsetSearch.model_validate(response)\n\ndef get(self, webset_id: str, id: str) -\\> WebsetSearch:\n\n\"\"\"Get a Search by ID.\n\nwebset_id (str): The id of the Webset.\n\nid (str): The id of the Search.\n\nWebsetSearch: The retrieved search.\n\nresponse = self.request(f\"/v0/websets/{webset_id}/searches/{id}\", method=\"GET\")\n\nreturn WebsetSearch.model_validate(response)\n\ndef cancel(self, webset_id: str, id: str) -\\> WebsetSearch:\n\n\"\"\"Cancel a running Search.\n\nwebset_id (str): The id of the Webset.\n\nid (str): The id of the Search.\n\nWebsetSearch: The canceled search.\n\nresponse = self.request(f\"/v0/websets/{webset_id}/searches/{id}/cancel\", method=\"POST\")\n\nreturn WebsetSearch.model_validate(response)\n\nsearches/\\__init_\\_.py\n\nfrom .client import WebsetSearchesClient\n\n**all** = [\"WebsetSearchesClient\"]\n\nfrom ..types import \\*",
  "code_samples": [],
  "headings": [],
  "url": "llms-txt#llm-prompt-for-writing-python",
  "links": []
}