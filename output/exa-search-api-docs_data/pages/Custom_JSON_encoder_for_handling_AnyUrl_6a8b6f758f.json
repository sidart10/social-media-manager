{
  "title": "Custom JSON encoder for handling AnyUrl",
  "content": "class ExaJSONEncoder(json.JSONEncoder):\n\ndef default(self, obj):\n\nif isinstance(obj, AnyUrl):\n\nreturn super().default(obj)\n\nclass ExaBaseModel(BaseModel):\n\n\"\"\"Base model for all Exa models with common configuration.\"\"\"\n\nmodel_config = ConfigDict(\n\npopulate_by_name=True,\n\nuse_enum_values=True,\n\ncoerce_numbers_to_str=False,  # Don't convert numbers to strings\n\nstr_strip_whitespace=True,  # Strip whitespace from strings\n\nstr_to_lower=False,  # Don't convert strings to lowercase\n\nstr_to_upper=False,  # Don't convert strings to uppercase\n\nfrom_attributes=True,  # Allow initialization from attributes\n\nvalidate_assignment=True,  # Validate on assignment\n\nextra='forbid',  # Forbid extra fields\n\njson_encoders={AnyUrl: str}  # Convert AnyUrl to string when serializing to JSON\n\nclass WebsetsBaseClient:\n\n\"\"\"Base client for Exa API resources.\"\"\"\n\ndef **init**(self, client):\n\n\"\"\"Initialize the client.\n\nclient: The parent Exa client.\n\nself.\\_client = client\n\ndef _prepare_data(self, data: Union[Dict[str, Any], ExaBaseModel, str], model_class: Optional[Type[ModelT]] = None) -\\> Union[Dict[str, Any], str]:\n\n\"\"\"Prepare data for API request, converting dict to model if needed.\n\ndata: Either a dictionary, model instance, or string\n\nmodel_class: The model class to use if data is a dictionary\n\nDictionary prepared for API request or string if string data was provided\n\nif isinstance(data, str):\n\n# Return string as is\n\nelif isinstance(data, dict) and model_class:\n\n# Convert dict to model instance\n\nmodel_instance = model_class.model_validate(data)\n\nreturn model_instance.model_dump(by_alias=True, exclude_none=True)\n\nelif isinstance(data, ExaBaseModel):\n\n# Use model's dump method\n\nreturn data.model_dump(by_alias=True, exclude_none=True)\n\nelif isinstance(data, dict):\n\nraise TypeError(f\"Expected dict, ExaBaseModel, or str, got {type(data)}\")\n\ndef request(self, endpoint: str, data: Optional[Union[Dict[str, Any], ExaBaseModel, str]] = None,\n\nmethod: str = \"POST\", params: Optional[Dict[str, Any]] = None) -\\> Dict[str, Any]:\n\n\"\"\"Make a request to the Exa API.\n\nendpoint (str): The API endpoint to request.\n\ndata (Union[Dict[str, Any], ExaBaseModel, str], optional): The request data. Can be a dictionary, model instance, or string. Defaults to None.\n\nmethod (str, optional): The HTTP method. Defaults to \"POST\".\n\nparams (Dict[str, Any], optional): The query parameters. Defaults to None.\n\nDict[str, Any]: The API response.\n\nif isinstance(data, str):\n\n# If data is a string, pass it as is\n\nelif data is not None and isinstance(data, ExaBaseModel):\n\n# If data is a model instance, convert it to a dict\n\ndata = data.model_dump(by_alias=True, exclude_none=True)\n\nreturn self.\\_client.request(\"/websets/\" \\+ endpoint, data=data, method=method, params=params)\n\nenrichments/[client.py](http://client.py)\n\nfrom **future** import annotations\n\nfrom typing import Dict, Any, Union\n\nfrom ..types import (\n\nCreateEnrichmentParameters,\n\nfrom ..core.base import WebsetsBaseClient\n\nclass WebsetEnrichmentsClient(WebsetsBaseClient):\n\n\"\"\"Client for managing Webset Enrichments.\"\"\"\n\ndef **init**(self, client):\n\nsuper().\\__init_\\_(client)\n\ndef create(self, webset_id: str, params: Union[Dict[str, Any], CreateEnrichmentParameters]) -\\> WebsetEnrichment:\n\n\"\"\"Create an Enrichment for a Webset.\n\nwebset_id (str): The id of the Webset.\n\nparams (CreateEnrichmentParameters): The parameters for creating an enrichment.\n\nWebsetEnrichment: The created enrichment.\n\nresponse = self.request(f\"/v0/websets/{webset_id}/enrichments\", data=params)\n\nreturn WebsetEnrichment.model_validate(response)\n\ndef get(self, webset_id: str, id: str) -\\> WebsetEnrichment:\n\n\"\"\"Get an Enrichment by ID.\n\nwebset_id (str): The id of the Webset.\n\nid (str): The id of the Enrichment.\n\nWebsetEnrichment: The retrieved enrichment.\n\nresponse = self.request(f\"/v0/websets/{webset_id}/enrichments/{id}\", method=\"GET\")\n\nreturn WebsetEnrichment.model_validate(response)\n\ndef delete(self, webset_id: str, id: str) -\\> WebsetEnrichment:\n\n\"\"\"Delete an Enrichment.\n\nwebset_id (str): The id of the Webset.\n\nid (str): The id of the Enrichment.\n\nWebsetEnrichment: The deleted enrichment.\n\nresponse = self.request(f\"/v0/websets/{webset_id}/enrichments/{id}\", method=\"DELETE\")\n\nreturn WebsetEnrichment.model_validate(response)\n\ndef cancel(self, webset_id: str, id: str) -\\> WebsetEnrichment:\n\n\"\"\"Cancel a running Enrichment.\n\nwebset_id (str): The id of the Webset.\n\nid (str): The id of the Enrichment.\n\nWebsetEnrichment: The canceled enrichment.\n\nresponse = self.request(f\"/v0/websets/{webset_id}/enrichments/{id}/cancel\", method=\"POST\")\n\nreturn WebsetEnrichment.model_validate(response)\n\nenrichments/\\__init_\\_.py\n\nfrom .client import WebsetEnrichmentsClient\n\n**all** = [\"WebsetEnrichmentsClient\"]\n\n\\_generator/pydantic/BaseModel.jinja2\n\n{% for decorator in decorators -%}\n\nclass {{ class_name }}({{ base_class }}):{% if comment is defined %}  # {{ comment }}{% endif %}\n\n{%- if description %}\n\n{{ description | indent(4) }}\n\n{%- if not fields and not description %}\n\n{%- filter indent(4) %}\n\n{%- for field in fields -%}\n\n{%- if [field.name](http://field.name) == \"type\" and field.field %}\n\ntype: Literal['{{ field.default }}']\n\n{%- elif [field.name](http://field.name) == \"object\" and field.field %}\n\nobject: Literal['{{ field.default }}']\n\n{%- elif not field.annotated and field.field %}\n\n{{ [field.name](http://field.name) }}: {{ field.type_hint }} = {{ field.field }}\n\n{%- if field.annotated %}\n\n{{ [field.name](http://field.name) }}: {{ field.annotated }}\n\n{{ [field.name](http://field.name) }}: {{ field.type_hint }}\n\n{%- if not (field.required or (field.represented_default == 'None' and field.strip_default_none)) or [field.data](http://field.data)\\_[type.is](http://type.is)\\_optional\n\n%} = {{ field.represented_default }}\n\n{%- if field.docstring %}\n\n{{ field.docstring | indent(4) }}\n\n{%- for method in methods -%}\n\nitems/[client.py](http://client.py)\n\nfrom **future** import annotations\n\nfrom typing import  Optional, Iterator\n\nfrom ..types import (\n\nListWebsetItemResponse,\n\nfrom ..core.base import WebsetsBaseClient\n\nclass WebsetItemsClient(WebsetsBaseClient):\n\n\"\"\"Client for managing Webset Items.\"\"\"\n\ndef **init**(self, client):\n\nsuper().\\__init_\\_(client)\n\ndef list(self, webset_id: str, \\*, cursor: Optional[str] = None,\n\nlimit: Optional[int] = None) -\\> ListWebsetItemResponse:\n\n\"\"\"List all Items for a Webset.\n\nwebset_id (str): The id or externalId of the Webset.\n\ncursor (str, optional): The cursor to paginate through the results.\n\nlimit (int, optional): The number of results to return (max 200).\n\nListWebsetItemResponse: List of webset items.\n\nparams = {k: v for k, v in {\"cursor\": cursor, \"limit\": limit}.items() if v is not None}\n\nresponse = self.request(f\"/v0/websets/{webset_id}/items\", params=params, method=\"GET\")\n\nreturn ListWebsetItemResponse.model_validate(response)\n\ndef list_all(self, webset_id: str, \\*, limit: Optional[int] = None) -\\> Iterator[WebsetItem]:\n\n\"\"\"Iterate through all Items in a Webset, handling pagination automatically.\n\nwebset_id (str): The id or externalId of the Webset.\n\nlimit (int, optional): The number of results to return per page (max 200).\n\nWebsetItem: Each item in the webset.\n\nresponse = self.list(webset_id, cursor=cursor, limit=limit)\n\nfor item in [response.data](http://response.data):\n\nif not response.has_more or not [response.next](http://response.next)\\_cursor:\n\ncursor = [response.next](http://response.next)\\_cursor\n\ndef get(self, webset_id: str, id: str) -\\> WebsetItem:\n\n\"\"\"Get an Item by ID.\n\nwebset_id (str): The id or externalId of the Webset.\n\nid (str): The id of the Webset item.\n\nWebsetItem: The retrieved item.\n\nresponse = self.request(f\"/v0/websets/{webset_id}/items/{id}\", method=\"GET\")\n\nreturn WebsetItem.model_validate(response)\n\ndef delete(self, webset_id: str, id: str) -\\> WebsetItem:\n\nwebset_id (str): The id or externalId of the Webset.\n\nid (str): The id of the Webset item.\n\nWebsetItem: The deleted item.\n\nresponse = self.request(f\"/v0/websets/{webset_id}/items/{id}\", method=\"DELETE\")\n\nreturn WebsetItem.model_validate(response)\n\nfrom .client import WebsetItemsClient\n\n**all** = [\"WebsetItemsClient\"]\n\nwebhooks/[client.py](http://client.py)\n\nfrom **future** import annotations\n\nfrom typing import Optional, Dict, Any, Union, Literal\n\nfrom ..types import (\n\nCreateWebhookParameters,\n\nListWebhooksResponse,\n\nUpdateWebhookParameters,\n\nListWebhookAttemptsResponse,\n\nfrom ..core.base import WebsetsBaseClient\n\nclass WebhookAttemptsClient(WebsetsBaseClient):\n\n\"\"\"Client for managing Webhook Attempts.\"\"\"\n\ndef **init**(self, client):\n\nsuper().\\__init_\\_(client)\n\ndef list(self, webhook_id: str, \\*, cursor: Optional[str] = None,\n\nlimit: Optional[int] = None, event_type: Optional[Union[EventType, str]] = None) -\\> ListWebhookAttemptsResponse:\n\n\"\"\"List all attempts made by a Webhook ordered in descending order.\n\nwebhook_id (str): The ID of the webhook.\n\ncursor (str, optional): The cursor to paginate through the results.\n\nlimit (int, optional): The number of results to return (max 200).\n\nevent_type (Union[EventType, str], optional): The type of event to filter by.\n\nListWebhookAttemptsResponse: List of webhook attempts.\n\nevent_type_value = None\n\nif event_type is not None:\n\nif isinstance(event_type, EventType):\n\nevent_type_value = event_type.value\n\nevent_type_value = event_type\n\nparams = {k: v for k, v in {\n\n\"eventType\": event_type_value\n\n}.items() if v is not None}\n\nresponse = self.request(f\"/v0/webhooks/{webhook_id}/attempts\", params=params, method=\"GET\")\n\nreturn ListWebhookAttemptsResponse.model_validate(response)\n\nclass WebsetWebhooksClient(WebsetsBaseClient):\n\n\"\"\"Client for managing Webset Webhooks.\"\"\"\n\ndef **init**(self, client):\n\nsuper().\\__init_\\_(client)\n\nself.attempts = WebhookAttemptsClient(client)\n\ndef create(self, params: Union[Dict[str, Any], CreateWebhookParameters]) -\\> Webhook:\n\nparams (CreateWebhookParameters): The parameters for creating a webhook.\n\nWebhook: The created webhook.\n\nresponse = self.request(\"/v0/webhooks\", data=params)\n\nreturn Webhook.model_validate(response)\n\ndef get(self, id: str) -\\> Webhook:\n\n\"\"\"Get a Webhook by ID.\n\nid (str): The id of the webhook.\n\nWebhook: The retrieved webhook.\n\nresponse = self.request(f\"/v0/webhooks/{id}\", method=\"GET\")\n\nreturn Webhook.model_validate(response)\n\ndef list(self, \\*, cursor: Optional[str] = None, limit: Optional[int] = None) -\\> ListWebhooksResponse:\n\n\"\"\"List all Webhooks.\n\ncursor (str, optional): The cursor to paginate through the results.\n\nlimit (int, optional): The number of results to return (max 200).\n\nListWebhooksResponse: List of webhooks.\n\nparams = {k: v for k, v in {\"cursor\": cursor, \"limit\": limit}.items() if v is not None}\n\nresponse = self.request(\"/v0/webhooks\", params=params, method=\"GET\")\n\nreturn ListWebhooksResponse.model_validate(response)\n\ndef update(self, id: str, params: Union[Dict[str, Any], UpdateWebhookParameters]) -\\> Webhook:\n\nid (str): The id of the webhook.\n\nparams (UpdateWebhookParameters): The parameters for updating a webhook.\n\nWebhook: The updated webhook.\n\nresponse = self.request(f\"/v0/webhooks/{id}\", data=params, method=\"PATCH\")\n\nreturn Webhook.model_validate(response)\n\ndef delete(self, id: str) -\\> Webhook:\n\nid (str): The id of the webhook.\n\nWebhook: The deleted webhook.\n\nresponse = self.request(f\"/v0/webhooks/{id}\", method=\"DELETE\")\n\nreturn Webhook.model_validate(response)\n\nwebhooks/\\__init_\\_.py\n\nfrom .client import WebsetWebhooksClient\n\n**all** = [\"WebsetWebhooksClient\"]\n\nfrom exa_py import Exa\n\nexa = Exa(os.environ.get(\"EXA_API_KEY\"))\n```\n\nwhere websets is accessed via exa.websets….",
  "code_samples": [
    {
      "code": "\\--END--\n\nHelp me answer anything about Exa Websets API using Python. If is first user’s message, begin with python instructions to import",
      "language": "unknown"
    }
  ],
  "headings": [],
  "url": "llms-txt#custom-json-encoder-for-handling-anyurl",
  "links": []
}