{
  "title": "Structured Outputs with Instructor",
  "content": "Source: https://docs.exa.ai/examples/getting-started-with-exa-in-instructor\n\nUsing Exa with instructor to generate structured outputs from web content.\n\n## What this doc covers\n\n* Setting up Exa to use [Instructor](https://python.useinstructor.com/) for structured output generation\n* Practical examples of using Exa and Instructor together\n\n## 1. Pre-requisites and installation\n\nInstall the required libraries:\n\nEnsure API keys are initialized properly. The environment variable names are `EXA_API_KEY` and `OPENAI_API_KEY`.\n\n<Card title=\"Get your Exa API key\" icon=\"key\" horizontal href=\"https://dashboard.exa.ai/api-keys\" />\n\n## 2. Why use Instructor?\n\nInstructor is a Python library that allows you to generate structured outputs from a language model.\n\nWe could instruct the LLM to return a structured output, but the output will still be a string, which we need to convert to a dictionary. What if the dictionary is not structured as we want? What if the LLM forgot to add the last \"}\" in the JSON? We would have to handle all of these errors manually.\n\nWe could use `{ \"type\": \"json_object\" }` [](https://platform.openai.com/docs/guides/structured-outputs/json-mode) which will make the LLM return a JSON object. But for this, we would need to provide a JSON schema, which can get [large and complex](https://python.useinstructor.com/why/#pydantic-over-raw-schema).\n\nInstead of doing this, we can use Instructor. Instructor is powered by [pydantic](https://docs.pydantic.dev/latest/), which means that it integrates with your IDE. We use pydantic's `BaseModel` to define the output model:\n\n## 3. Setup and Basic Usage\n\nLet's set up Exa and Instructor:\n\n```python Python theme={null}\nimport os\n\nimport instructor\nfrom exa_py import Exa\nfrom openai import OpenAI\nfrom pydantic import BaseModel\n\nexa = Exa(os.environ[\"EXA_API_KEY\"])\nclient = instructor.from_openai(OpenAI())\n\nsearch_results = exa.search_and_contents(\n    \"Latest advancements in quantum computing\",\n    type=\"neural\",\n    text=True,\n)",
  "code_samples": [
    {
      "code": "Ensure API keys are initialized properly. The environment variable names are `EXA_API_KEY` and `OPENAI_API_KEY`.\n\n<Card title=\"Get your Exa API key\" icon=\"key\" horizontal href=\"https://dashboard.exa.ai/api-keys\" />\n\n## 2. Why use Instructor?\n\nInstructor is a Python library that allows you to generate structured outputs from a language model.\n\nWe could instruct the LLM to return a structured output, but the output will still be a string, which we need to convert to a dictionary. What if the dictionary is not structured as we want? What if the LLM forgot to add the last \"}\" in the JSON? We would have to handle all of these errors manually.\n\nWe could use `{ \"type\": \"json_object\" }` [](https://platform.openai.com/docs/guides/structured-outputs/json-mode) which will make the LLM return a JSON object. But for this, we would need to provide a JSON schema, which can get [large and complex](https://python.useinstructor.com/why/#pydantic-over-raw-schema).\n\nInstead of doing this, we can use Instructor. Instructor is powered by [pydantic](https://docs.pydantic.dev/latest/), which means that it integrates with your IDE. We use pydantic's `BaseModel` to define the output model:\n\n## 3. Setup and Basic Usage\n\nLet's set up Exa and Instructor:",
      "language": "unknown"
    }
  ],
  "headings": [
    {
      "level": "h2",
      "text": "What this doc covers",
      "id": "what-this-doc-covers"
    },
    {
      "level": "h2",
      "text": "Guide",
      "id": "guide"
    },
    {
      "level": "h2",
      "text": "1. Pre-requisites and installation",
      "id": "1.-pre-requisites-and-installation"
    },
    {
      "level": "h2",
      "text": "2. Why use Instructor?",
      "id": "2.-why-use-instructor?"
    },
    {
      "level": "h2",
      "text": "3. Setup and Basic Usage",
      "id": "3.-setup-and-basic-usage"
    }
  ],
  "url": "llms-txt#structured-outputs-with-instructor",
  "links": []
}