{
  "title": "Building a News Summarizer",
  "content": "Source: https://docs.exa.ai/examples/recent-news-summarizer\n\nLearn how to build an AI-powered news summarizer that searches and summarizes recent articles using Exa and GPT.\n\nIn this example, we will build an LLM-based news summarizer with the Exa API to keep us up-to-date with the latest news on a given topic. We'll do this in three steps:\n\n1. Generate search queries for Exa using an LLM\n2. Retrieve relevant URLs and their contents using Exa\n3. Summarize webpage contents using GPT-3.5 Turbo\n\nThis is a form of Retrieval Augmented Generation (RAG), combining Exa's search capabilities with GPT's summarization abilities.\n\nThe Jupyter notebook for this tutorial is available on [Colab](https://colab.research.google.com/drive/1uZ0kxFCWmCqozl3ArTJohNpRbeEYlwlT?usp=sharing) for easy experimentation. You can also [check it out on Github](https://github.com/exa-labs/exa-py/tree/master/examples/newssummarizer/summarizer.ipynb), including a [plain Python version](https://github.com/exa-labs/exa-py/tree/master/examples/newssummarizer/summarizer.py) if you want to skip to the complete product.\n\n<Steps>\n  <Step title=\"Pre-requisites and installation\">\n    Install the required packages:\n\n<Note> You'll need both an Exa API key and an OpenAI API key to run this example. You can get your OpenAI API key [here](https://platform.openai.com/api-keys).</Note>\n\n<Card title=\"Get your Exa API key\" icon=\"key\" horizontal href=\"https://dashboard.exa.ai/api-keys\" />\n\nSet up your API keys:\n\n<Step title=\"Initialize the clients\">\n    Import and set up both the OpenAI and Exa clients:\n\n<Step title=\"Generate a search query\">\n    First, we'll use GPT to generate an optimized search query based on the user's question:\n\n<Step title=\"Search for recent articles\">\n    Now we'll use Exa to search for recent articles, filtering by publication date:\n\n<Note>\n      We use `start_published_date` to filter for recent content.\n    </Note>\n  </Step>\n\n<Step title=\"Get article contents\">\n    Exa's `search_and_contents` already retrieved the article contents for us, so we can access them directly:\n\n<Note>\n      Unlike traditional search engines that only return URLs, Exa gives us direct access to the webpage contents, eliminating the need for web scraping.\n    </Note>\n  </Step>\n\n<Step title=\"Generate a summary\">\n    Finally, we'll use GPT to create a concise summary of the article:\n\nAnd we're done! We've built an app that translates a question into a search query, uses Exa to search for useful links and their contents, and summarizes the content to effortlessly answer questions about the latest news.\n\n**Through Exa, we have given our LLM access to the entire Internet.** The possibilities are endless.\n  </Step>\n</Steps>",
  "code_samples": [
    {
      "code": "<Note> You'll need both an Exa API key and an OpenAI API key to run this example. You can get your OpenAI API key [here](https://platform.openai.com/api-keys).</Note>\n\n    <Card title=\"Get your Exa API key\" icon=\"key\" horizontal href=\"https://dashboard.exa.ai/api-keys\" />\n\n    Set up your API keys:",
      "language": "unknown"
    },
    {
      "code": "</Step>\n\n  <Step title=\"Initialize the clients\">\n    Import and set up both the OpenAI and Exa clients:",
      "language": "unknown"
    },
    {
      "code": "</Step>\n\n  <Step title=\"Generate a search query\">\n    First, we'll use GPT to generate an optimized search query based on the user's question:",
      "language": "unknown"
    },
    {
      "code": "</Step>\n\n  <Step title=\"Search for recent articles\">\n    Now we'll use Exa to search for recent articles, filtering by publication date:",
      "language": "unknown"
    },
    {
      "code": "<Note>\n      We use `start_published_date` to filter for recent content.\n    </Note>\n  </Step>\n\n  <Step title=\"Get article contents\">\n    Exa's `search_and_contents` already retrieved the article contents for us, so we can access them directly:",
      "language": "unknown"
    },
    {
      "code": "<Note>\n      Unlike traditional search engines that only return URLs, Exa gives us direct access to the webpage contents, eliminating the need for web scraping.\n    </Note>\n  </Step>\n\n  <Step title=\"Generate a summary\">\n    Finally, we'll use GPT to create a concise summary of the article:",
      "language": "unknown"
    }
  ],
  "headings": [
    {
      "level": "h2",
      "text": "Get Started",
      "id": "get-started"
    }
  ],
  "url": "llms-txt#building-a-news-summarizer",
  "links": []
}