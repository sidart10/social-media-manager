{
  "title": "Limit search_results to a maximum of 20,000 characters",
  "content": "search_results = search_results.results[:20000]\n\nclass QuantumComputingAdvancement(BaseModel):\n    technology: str\n    description: str\n    potential_impact: str\n\ndef __str__(self):\n        return (\n            f\"Technology: {self.technology}\\n\"\n            f\"Description: {self.description}\\n\"\n            f\"Potential Impact: {self.potential_impact}\"\n        )\n\nstructured_output = client.chat.completions.create(\n    model=\"gpt-3.5-turbo\",\n    response_model=QuantumComputingAdvancement,\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": f\"Based on the provided context, describe a recent advancement in quantum computing.\\n\\n{search_results}\",\n        }\n    ],\n)\n\nprint(structured_output)\npython Python theme={null}\nimport os\nfrom typing import List\n\nimport instructor\nfrom exa_py import Exa\nfrom openai import OpenAI\nfrom pydantic import BaseModel, field_validator\n\nexa = Exa(os.environ[\"EXA_API_KEY\"])\nclient = instructor.from_openai(OpenAI())\n\nclass ResearchPaper(BaseModel):\n    title: str\n    authors: List[str]\n    key_findings: List[str]\n    methodology: str\n\n@field_validator(\"title\")\n    @classmethod\n    def validate_title(cls, v):\n        if v.upper() != v:\n            raise ValueError(\"Title must be in uppercase.\")\n        return v\n\ndef __str__(self):\n        return (\n            f\"Title: {self.title}\\n\"\n            f\"Authors: {', '.join(self.authors)}\\n\"\n            f\"Key Findings: {', '.join(self.key_findings)}\\n\"\n            f\"Methodology: {self.methodology}\"\n        )\n\nclass ResearchAnalysis(BaseModel):\n    papers: List[ResearchPaper]\n    common_themes: List[str]\n    future_directions: str\n\ndef __str__(self):\n        return (\n            f\"Common Themes:\\n- {', '.join(self.common_themes)}\\n\"\n            f\"Future Directions: {self.future_directions}\\n\"\n            f\"Analyzed Papers:\\n\" + \"\\n\".join(str(paper) for paper in self.papers)\n        )",
  "code_samples": [
    {
      "code": "Here we define a `QuantumComputingAdvancement` class that inherits from `BaseModel` from Pydantic. This class will be used by Instructor to validate the output from the LLM and for the LLM as a response model. We also implement the `__str__()` method for easy printing of the output. We then initialize `OpenAI()` and wrap instructor on top of it with `instructor.from_openai` to create a client that will return structured outputs. If the output is not structured as our class, Instructor makes the LLM retry until max\\_retries is reached. You can read more about how Instructor retries [here](https://python.useinstructor.com/why/#retries).\n\nThis example demonstrates how to use Exa to search for content about quantum computing advancements and structure the output using Instructor.\n\n## 4. Advanced Example: Analyzing Multiple Research Papers\n\nLet's create a more complex example where we analyze multiple research papers on a specific topic and use pydantic's own validation model to correct the structured data to show you how we can be *even* more fine-grained:",
      "language": "unknown"
    }
  ],
  "headings": [
    {
      "level": "h2",
      "text": "4. Advanced Example: Analyzing Multiple Research Papers",
      "id": "4.-advanced-example:-analyzing-multiple-research-papers"
    }
  ],
  "url": "llms-txt#limit-search_results-to-a-maximum-of-20,000-characters",
  "links": []
}