{
  "title": "Contents Retrieval",
  "content": "Source: https://docs.exa.ai/reference/contents-retrieval\n\nWhen using the Exa API, you can request different types of content to be returned for each search result.\n\nReturns the full text content of the result, formatted as markdown. It extracts the main content (like article body text) while filtering out navigation elements, pop-ups, and other peripheral text. This is extractive content taken directly from the page's source.\n\n## Summary (summary=True)\n\nProvides a concise summary generated from the text, tailored to a specific query you provide. This is abstractive content created by processing the source text using Gemini Flash.\n\n### Structured Summaries\n\nYou can also request structured summaries by providing a JSON schema:\n\nThe API will return the summary as a JSON string that matches your schema structure, which you can parse to access the structured data.\n\nDelivers key excerpts from the text that are most relevant to your search query, emphasizing important information within the content. This is also extractive content from the source.\n\nYou can configure highlights in two ways:\n\n1. **Simple boolean** (`highlights=True`): Returns default highlights based on the search query\n\n2. **Detailed configuration** (pass as an object):\n   \n   * `query`: The specific query to use for generating highlights (if different from search query)\n   * `numSentences`: Number of sentences per highlight (minimum: 1)\n   * `highlightsPerUrl`: Maximum number of highlights to return per URL (minimum: 1)\n\nReturns page contents as a single combined string ready for LLM RAG applications. When you set `context=True`, all result contents are joined together into one text block.\n\n**Performance Note**: Context strings often perform better than highlights for RAG applications because they provide more complete information from each page.\n\n* If you have 5 results and set a 1000 character limit, each result gets about 200 characters\n* We recommend using 10000+ characters for best results\n* No character limit works best when possible\n\n1. **Simple boolean** (`context=True`): Returns all content combined with no character limit\n2. **With character limit** (pass as an object):\n\n## Images and favicons\n\nYou can get images from webpages by setting `imageLinks` (under `contents.extras.imageLinks`) to specify how many images you want per result. Each result also includes the website's `favicon` URL and a representative `image` URL when available.\n\nThe contents endpoint provides detailed status information for each URL through the `statuses` field in the response. The endpoint only returns an error if there's an internal issue on Exa's end - all other cases are reported through individual URL statuses.\n\nEach response includes a `statuses` array with status information for each requested URL:\n\nThe error tags correspond to different failure scenarios:\n\n* `CRAWL_NOT_FOUND`: Content not found (HTTP 404)\n* `CRAWL_TIMEOUT`: The target page returned a timeout error (HTTP 408)\n* `CRAWL_LIVECRAWL_TIMEOUT`: The `livecrawlTimeout` parameter limit was reached during crawling\n* `SOURCE_NOT_AVAILABLE`: Access forbidden or source unavailable (HTTP 403)\n* `CRAWL_UNKNOWN_ERROR`: Other errors (HTTP 500+)\n\nTo handle errors, check the `statuses` field for each URL:\n\nThis allows you to handle different failure scenarios appropriately for each URL in your request.",
  "code_samples": [
    {
      "code": "The API will return the summary as a JSON string that matches your schema structure, which you can parse to access the structured data.\n\n## Highlights\n\nDelivers key excerpts from the text that are most relevant to your search query, emphasizing important information within the content. This is also extractive content from the source.\n\nYou can configure highlights in two ways:\n\n1. **Simple boolean** (`highlights=True`): Returns default highlights based on the search query\n\n2. **Detailed configuration** (pass as an object):",
      "language": "unknown"
    },
    {
      "code": "* `query`: The specific query to use for generating highlights (if different from search query)\n   * `numSentences`: Number of sentences per highlight (minimum: 1)\n   * `highlightsPerUrl`: Maximum number of highlights to return per URL (minimum: 1)\n\n## Context String\n\nReturns page contents as a single combined string ready for LLM RAG applications. When you set `context=True`, all result contents are joined together into one text block.\n\n**Performance Note**: Context strings often perform better than highlights for RAG applications because they provide more complete information from each page.\n\n### How it works:\n\n* If you have 5 results and set a 1000 character limit, each result gets about 200 characters\n* We recommend using 10000+ characters for best results\n* No character limit works best when possible\n\n### Configuration:\n\n1. **Simple boolean** (`context=True`): Returns all content combined with no character limit\n2. **With character limit** (pass as an object):",
      "language": "unknown"
    },
    {
      "code": "## Images and favicons\n\nYou can get images from webpages by setting `imageLinks` (under `contents.extras.imageLinks`) to specify how many images you want per result. Each result also includes the website's `favicon` URL and a representative `image` URL when available.\n\n## Crawl Errors\n\nThe contents endpoint provides detailed status information for each URL through the `statuses` field in the response. The endpoint only returns an error if there's an internal issue on Exa's end - all other cases are reported through individual URL statuses.\n\nEach response includes a `statuses` array with status information for each requested URL:",
      "language": "unknown"
    },
    {
      "code": "The error tags correspond to different failure scenarios:\n\n* `CRAWL_NOT_FOUND`: Content not found (HTTP 404)\n* `CRAWL_TIMEOUT`: The target page returned a timeout error (HTTP 408)\n* `CRAWL_LIVECRAWL_TIMEOUT`: The `livecrawlTimeout` parameter limit was reached during crawling\n* `SOURCE_NOT_AVAILABLE`: Access forbidden or source unavailable (HTTP 403)\n* `CRAWL_UNKNOWN_ERROR`: Other errors (HTTP 500+)\n\nTo handle errors, check the `statuses` field for each URL:",
      "language": "unknown"
    }
  ],
  "headings": [
    {
      "level": "h2",
      "text": "Text (text=True)",
      "id": "text-(text=true)"
    },
    {
      "level": "h2",
      "text": "Summary (summary=True)",
      "id": "summary-(summary=true)"
    },
    {
      "level": "h3",
      "text": "Structured Summaries",
      "id": "structured-summaries"
    },
    {
      "level": "h2",
      "text": "Highlights",
      "id": "highlights"
    },
    {
      "level": "h2",
      "text": "Context String",
      "id": "context-string"
    },
    {
      "level": "h3",
      "text": "How it works:",
      "id": "how-it-works:"
    },
    {
      "level": "h3",
      "text": "Configuration:",
      "id": "configuration:"
    },
    {
      "level": "h2",
      "text": "Images and favicons",
      "id": "images-and-favicons"
    },
    {
      "level": "h2",
      "text": "Crawl Errors",
      "id": "crawl-errors"
    }
  ],
  "url": "llms-txt#contents-retrieval",
  "links": []
}