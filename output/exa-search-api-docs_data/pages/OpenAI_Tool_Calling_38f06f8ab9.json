{
  "title": "OpenAI Tool Calling",
  "content": "Source: https://docs.exa.ai/reference/openai-tool-calling\n\nLearn to use OpenAI's tool call feature with Exa's Search Integration\n\n<Info>\n  OpenAI recommends using the Responses API for all new projects. [See the guide](./openai-responses-api-with-exa).\n</Info>\n\nOpenAI's [tool calling](https://platform.openai.com/docs/guides/function-calling?lang=python) allows LLMs to call functions that are defined in your code. This guide will show you how to utilise tool calling to call Exa's search, with the following steps:\n\n1. Install prerequisite packages and set up the environment\n2. Overview of how OpenAI's tool calling feature works\n3. Use Exa within an OpenAI tool call\n\n<Steps>\n  <Step title=\"Pre-requisites and installation\">\n    Install the:\n\n* `openai` library to perform OpenAI API calls and completions\n    * `exa_py` library to perform Exa search\n    * `rich` library to make the output more readable\n\n<Step title=\"Set up the environment variables\">\n    Create an `.env` file in the root of your project and set the `EXA_API_KEY` and `OPENAI_API_KEY` environment variable to your API keys respectively. Visit the [OpenAI playground](https://platform.openai.com/api-keys) and the [Exa dashboard](https://dashboard.exa.ai/api-keys) to generate your API keys.\n\n<Card title=\"Get your Exa API key\" icon=\"key\" horizontal href=\"https://dashboard.exa.ai/api-keys\" />\n\n<Step title=\"What is OpenAI tool calling?\">\n    OpenAI LLMs can call a function you have defined in your code, this is called [tool calling](https://platform.openai.com/docs/guides/function-calling?lang=python). To do this you first need to describe the function you want to call to OpenAI's LLM. You can do this by defining a description object of the format:\n\nWhen this description is sent to OpenAI's LLM, it returns an object with a string, which is the function name defined in *your* code, and the arguments that the function takes. This does not execute or *call* functions on OpenAI's side; it only returns the function name and arguments which you will have to parse and call yourself in your code.\n\nWe will use this object to - in this case - call the `exa_search` function we define with the arguments provided.\n  </Step>\n\n<Step title=\"Use Exa Search as an OpenAI tool\">\n    First, we import and initialise the OpenAI and Exa libraries and load the stored API keys.\n\nNext, we define the function and the function schema so that OpenAI knows how to use it and what arguments our local function takes:\n\nFinally, we'll define the primer `SYSTEM_MESSAGE`, which explains to OpenAI what it is supposed to do:\n\nWe can now start writing the code needed to perform the LLM calls and the search. We'll create the `exa_search` function that will call Exa's `search_and_contents` function with the query:\n\nNext, we create a function to process the tool calls:\n\nLastly, we'll create a `main` function to bring it all together, and handle the user input and interaction with OpenAI:\n\nThe implementation creates a loop that continually prompts the user for search queries, uses OpenAI's tool calling feature to determine when to perform a search, and then uses the Exa search results to provide an informed response to the user's query.\n\nWe also use the rich library to provide a more visually appealing console interface, including coloured output and markdown rendering for the responses.\n  </Step>\n\n<Step title=\"Running the code\">\n    Save the code in a file, e.g. `openai_search.py`, and make sure the `.env` file containing the API keys we previously created is in the same directory as the script.\n\nThen run the script using the following command from your terminal:\n\nYou should see a prompt:\n\nThat's it, enjoy your search agent!\n  </Step>\n</Steps>\n\n```python Python theme={null}\nimport json\nimport os\n\nfrom dotenv import load_dotenv\nfrom typing import Any, Dict\nfrom exa_py import Exa\nfrom openai import OpenAI\nfrom rich.console import Console\nfrom rich.markdown import Markdown\nfrom rich.prompt import Prompt",
  "code_samples": [
    {
      "code": "</Step>\n\n  <Step title=\"Set up the environment variables\">\n    Create an `.env` file in the root of your project and set the `EXA_API_KEY` and `OPENAI_API_KEY` environment variable to your API keys respectively. Visit the [OpenAI playground](https://platform.openai.com/api-keys) and the [Exa dashboard](https://dashboard.exa.ai/api-keys) to generate your API keys.\n\n    <br />\n\n    <Card title=\"Get your Exa API key\" icon=\"key\" horizontal href=\"https://dashboard.exa.ai/api-keys\" />",
      "language": "unknown"
    },
    {
      "code": "</Step>\n\n  <Step title=\"What is OpenAI tool calling?\">\n    OpenAI LLMs can call a function you have defined in your code, this is called [tool calling](https://platform.openai.com/docs/guides/function-calling?lang=python). To do this you first need to describe the function you want to call to OpenAI's LLM. You can do this by defining a description object of the format:",
      "language": "unknown"
    },
    {
      "code": "When this description is sent to OpenAI's LLM, it returns an object with a string, which is the function name defined in *your* code, and the arguments that the function takes. This does not execute or *call* functions on OpenAI's side; it only returns the function name and arguments which you will have to parse and call yourself in your code.",
      "language": "unknown"
    },
    {
      "code": "We will use this object to - in this case - call the `exa_search` function we define with the arguments provided.\n  </Step>\n\n  <Step title=\"Use Exa Search as an OpenAI tool\">\n    First, we import and initialise the OpenAI and Exa libraries and load the stored API keys.",
      "language": "unknown"
    },
    {
      "code": "Next, we define the function and the function schema so that OpenAI knows how to use it and what arguments our local function takes:",
      "language": "unknown"
    },
    {
      "code": "Finally, we'll define the primer `SYSTEM_MESSAGE`, which explains to OpenAI what it is supposed to do:",
      "language": "unknown"
    },
    {
      "code": "We can now start writing the code needed to perform the LLM calls and the search. We'll create the `exa_search` function that will call Exa's `search_and_contents` function with the query:",
      "language": "unknown"
    },
    {
      "code": "Next, we create a function to process the tool calls:",
      "language": "unknown"
    },
    {
      "code": "Lastly, we'll create a `main` function to bring it all together, and handle the user input and interaction with OpenAI:",
      "language": "unknown"
    },
    {
      "code": "The implementation creates a loop that continually prompts the user for search queries, uses OpenAI's tool calling feature to determine when to perform a search, and then uses the Exa search results to provide an informed response to the user's query.\n\n    We also use the rich library to provide a more visually appealing console interface, including coloured output and markdown rendering for the responses.\n  </Step>\n\n  <Step title=\"Running the code\">\n    Save the code in a file, e.g. `openai_search.py`, and make sure the `.env` file containing the API keys we previously created is in the same directory as the script.\n\n    Then run the script using the following command from your terminal:",
      "language": "unknown"
    },
    {
      "code": "You should see a prompt:",
      "language": "unknown"
    },
    {
      "code": "Let's test it out.",
      "language": "unknown"
    },
    {
      "code": "That's it, enjoy your search agent!\n  </Step>\n</Steps>\n\n## Full code",
      "language": "unknown"
    }
  ],
  "headings": [
    {
      "level": "h2",
      "text": "Get Started",
      "id": "get-started"
    },
    {
      "level": "h2",
      "text": "Full code",
      "id": "full-code"
    }
  ],
  "url": "llms-txt#openai-tool-calling",
  "links": []
}